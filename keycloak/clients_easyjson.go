// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package keycloak

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels(in *jlexer.Lexer, out *ScopeRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayName":
			out.DisplayName = string(in.String())
		case "iconURI":
			out.IconURI = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]PolicyRepresentation, 0, 1)
					} else {
						out.Policies = []PolicyRepresentation{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PolicyRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Policies = append(out.Policies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]ResourceRepresentation, 0, 1)
					} else {
						out.Resources = []ResourceRepresentation{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ResourceRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v2).UnmarshalJSON(data))
					}
					out.Resources = append(out.Resources, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels(out *jwriter.Writer, in ScopeRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.IconURI != "" {
		const prefix string = ",\"iconURI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IconURI))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Policies) != 0 {
		const prefix string = ",\"policies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Policies {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Raw((v4).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Resources {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Raw((v6).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScopeRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScopeRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScopeRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScopeRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels(l, v)
}
func easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels1(in *jlexer.Lexer, out *ResourceServerRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowRemoteResourceManagement":
			out.AllowRemoteResourceManagement = bool(in.Bool())
		case "clientID":
			out.ClientID = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]PolicyRepresentation, 0, 1)
					} else {
						out.Policies = []PolicyRepresentation{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v7 PolicyRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Policies = append(out.Policies, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "policyEnforcementMode":
			out.PolicyEnforcementMode = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]ResourceRepresentation, 0, 1)
					} else {
						out.Resources = []ResourceRepresentation{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v8 ResourceRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v8).UnmarshalJSON(data))
					}
					out.Resources = append(out.Resources, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]ScopeRepresentation, 0, 1)
					} else {
						out.Scopes = []ScopeRepresentation{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 ScopeRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v9).UnmarshalJSON(data))
					}
					out.Scopes = append(out.Scopes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels1(out *jwriter.Writer, in ResourceServerRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllowRemoteResourceManagement {
		const prefix string = ",\"allowRemoteResourceManagement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowRemoteResourceManagement))
	}
	if in.ClientID != "" {
		const prefix string = ",\"clientID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientID))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Policies) != 0 {
		const prefix string = ",\"policies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Policies {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Raw((v11).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.PolicyEnforcementMode != "" {
		const prefix string = ",\"policyEnforcementMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PolicyEnforcementMode))
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Resources {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Raw((v13).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Scopes) != 0 {
		const prefix string = ",\"scopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Scopes {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Raw((v15).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceServerRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceServerRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceServerRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceServerRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels1(l, v)
}
func easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels2(in *jlexer.Lexer, out *ResourceRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					(out.Attributes)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "displayName":
			out.DisplayName = string(in.String())
		case "iconURI":
			out.IconURI = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "ownerManagedAccess":
			out.OwnerManagedAccess = bool(in.Bool())
		case "scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]ScopeRepresentation, 0, 1)
					} else {
						out.Scopes = []ScopeRepresentation{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v17 ScopeRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v17).UnmarshalJSON(data))
					}
					out.Scopes = append(out.Scopes, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "uri":
			out.URI = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels2(out *jwriter.Writer, in ResourceRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Attributes {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if m, ok := v18Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v18Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v18Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.IconURI != "" {
		const prefix string = ",\"iconURI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IconURI))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.OwnerManagedAccess {
		const prefix string = ",\"ownerManagedAccess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OwnerManagedAccess))
	}
	if len(in.Scopes) != 0 {
		const prefix string = ",\"scopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Scopes {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.Raw((v20).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.URI != "" {
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels2(l, v)
}
func easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels3(in *jlexer.Lexer, out *ProtocolMapperRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 interface{}
					if m, ok := v21.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v21.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v21 = in.Interface()
					}
					(out.Config)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "protocolMapper":
			out.ProtocolMapper = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels3(out *jwriter.Writer, in ProtocolMapperRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Config {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				if m, ok := v22Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v22Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v22Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	if in.ProtocolMapper != "" {
		const prefix string = ",\"protocolMapper\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProtocolMapper))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProtocolMapperRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProtocolMapperRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProtocolMapperRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProtocolMapperRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels3(l, v)
}
func easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels4(in *jlexer.Lexer, out *PolicyRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 interface{}
					if m, ok := v23.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v23.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v23 = in.Interface()
					}
					(out.Config)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "decisionStrategy":
			out.DecisionStrategy = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "logic":
			out.Logic = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]string, 0, 4)
					} else {
						out.Policies = []string{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.Policies = append(out.Policies, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Resources = append(out.Resources, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]string, 0, 4)
					} else {
						out.Scopes = []string{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Scopes = append(out.Scopes, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels4(out *jwriter.Writer, in PolicyRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.Config {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				if m, ok := v27Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v27Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v27Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.DecisionStrategy != "" {
		const prefix string = ",\"decisionStrategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DecisionStrategy))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Logic != "" {
		const prefix string = ",\"logic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Logic))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Owner != "" {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Owner))
	}
	if len(in.Policies) != 0 {
		const prefix string = ",\"policies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Policies {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Resources {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.Scopes) != 0 {
		const prefix string = ",\"scopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Scopes {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels4(l, v)
}
func easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels5(in *jlexer.Lexer, out *ClientRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access":
			out.Access = string(in.String())
		case "adminUrl":
			out.AdminURL = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 interface{}
					if m, ok := v34.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v34.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v34 = in.Interface()
					}
					(out.Attributes)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "authenticationFlowBindingOverrides":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AuthenticationFlowBindingOverrides = make(AttributeMap)
				} else {
					out.AuthenticationFlowBindingOverrides = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 interface{}
					if m, ok := v35.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v35.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v35 = in.Interface()
					}
					(out.AuthenticationFlowBindingOverrides)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "authorizationServicesEnabled":
			out.AuthorizationServicesEnabled = bool(in.Bool())
		case "authorizationSettings":
			if in.IsNull() {
				in.Skip()
				out.AuthorizationSettings = nil
			} else {
				if out.AuthorizationSettings == nil {
					out.AuthorizationSettings = new(ResourceServerRepresentation)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AuthorizationSettings).UnmarshalJSON(data))
				}
			}
		case "baseURL":
			out.BaseURL = string(in.String())
		case "bearerOnly":
			out.BearerOnly = bool(in.Bool())
		case "clientAuthenticatorType":
			out.ClientAuthenticatorType = string(in.String())
		case "clientID":
			out.ClientID = string(in.String())
		case "consentRequired":
			out.ConsentRequired = bool(in.Bool())
		case "defaultClientScopes":
			if in.IsNull() {
				in.Skip()
				out.DefaultClientScopes = nil
			} else {
				in.Delim('[')
				if out.DefaultClientScopes == nil {
					if !in.IsDelim(']') {
						out.DefaultClientScopes = make([]string, 0, 4)
					} else {
						out.DefaultClientScopes = []string{}
					}
				} else {
					out.DefaultClientScopes = (out.DefaultClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.DefaultClientScopes = append(out.DefaultClientScopes, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultRoles":
			if in.IsNull() {
				in.Skip()
				out.DefaultRoles = nil
			} else {
				in.Delim('[')
				if out.DefaultRoles == nil {
					if !in.IsDelim(']') {
						out.DefaultRoles = make([]string, 0, 4)
					} else {
						out.DefaultRoles = []string{}
					}
				} else {
					out.DefaultRoles = (out.DefaultRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.DefaultRoles = append(out.DefaultRoles, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "directAccessGrantsEnabled":
			out.DirectAccessGrantsEnabled = bool(in.Bool())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "frontChannelLogout":
			out.FrontChannelLogout = bool(in.Bool())
		case "fullScopeAllowed":
			out.FullScopeAllowed = bool(in.Bool())
		case "id":
			out.ID = string(in.String())
		case "implicitFlowEnabled":
			out.ImplicitFlowEnabled = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "nodeRegistrationTimeout":
			if in.IsNull() {
				in.Skip()
				out.NodeRegistrationTimeout = nil
			} else {
				if out.NodeRegistrationTimeout == nil {
					out.NodeRegistrationTimeout = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NodeRegistrationTimeout).UnmarshalJSON(data))
				}
			}
		case "notBefore":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "optionalClientScopes":
			if in.IsNull() {
				in.Skip()
				out.OptionalClientScopes = nil
			} else {
				in.Delim('[')
				if out.OptionalClientScopes == nil {
					if !in.IsDelim(']') {
						out.OptionalClientScopes = make([]string, 0, 4)
					} else {
						out.OptionalClientScopes = []string{}
					}
				} else {
					out.OptionalClientScopes = (out.OptionalClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.OptionalClientScopes = append(out.OptionalClientScopes, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "origin":
			out.Origin = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "protocolMappers":
			if in.IsNull() {
				in.Skip()
				out.ProtocolMappers = nil
			} else {
				in.Delim('[')
				if out.ProtocolMappers == nil {
					if !in.IsDelim(']') {
						out.ProtocolMappers = make([]ProtocolMapperRepresentation, 0, 1)
					} else {
						out.ProtocolMappers = []ProtocolMapperRepresentation{}
					}
				} else {
					out.ProtocolMappers = (out.ProtocolMappers)[:0]
				}
				for !in.IsDelim(']') {
					var v39 ProtocolMapperRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v39).UnmarshalJSON(data))
					}
					out.ProtocolMappers = append(out.ProtocolMappers, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "publicClient":
			out.PublicClient = bool(in.Bool())
		case "redirectURIs":
			if in.IsNull() {
				in.Skip()
				out.RedirectURIs = nil
			} else {
				in.Delim('[')
				if out.RedirectURIs == nil {
					if !in.IsDelim(']') {
						out.RedirectURIs = make([]string, 0, 4)
					} else {
						out.RedirectURIs = []string{}
					}
				} else {
					out.RedirectURIs = (out.RedirectURIs)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.RedirectURIs = append(out.RedirectURIs, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "registeredNodes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.RegisteredNodes = make(AttributeMap)
				} else {
					out.RegisteredNodes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v41 interface{}
					if m, ok := v41.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v41.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v41 = in.Interface()
					}
					(out.RegisteredNodes)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		case "registrationAccessToken":
			out.RegistrationAccessToken = string(in.String())
		case "rootURL":
			out.RootURL = string(in.String())
		case "secret":
			out.Secret = string(in.String())
		case "serviceAccountsEnabled":
			out.ServiceAccountsEnabled = bool(in.Bool())
		case "standardFlowEnabled":
			out.StandardFlowEnabled = bool(in.Bool())
		case "surrogateAuthRequired":
			out.SurrogateAuthRequired = bool(in.Bool())
		case "webOrigins":
			if in.IsNull() {
				in.Skip()
				out.WebOrigins = nil
			} else {
				in.Delim('[')
				if out.WebOrigins == nil {
					if !in.IsDelim(']') {
						out.WebOrigins = make([]string, 0, 4)
					} else {
						out.WebOrigins = []string{}
					}
				} else {
					out.WebOrigins = (out.WebOrigins)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.WebOrigins = append(out.WebOrigins, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels5(out *jwriter.Writer, in ClientRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Access != "" {
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Access))
	}
	if in.AdminURL != "" {
		const prefix string = ",\"adminUrl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdminURL))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.Attributes {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v43Name))
				out.RawByte(':')
				if m, ok := v43Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v43Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v43Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.AuthenticationFlowBindingOverrides) != 0 {
		const prefix string = ",\"authenticationFlowBindingOverrides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v44First := true
			for v44Name, v44Value := range in.AuthenticationFlowBindingOverrides {
				if v44First {
					v44First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v44Name))
				out.RawByte(':')
				if m, ok := v44Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v44Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v44Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.AuthorizationServicesEnabled {
		const prefix string = ",\"authorizationServicesEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AuthorizationServicesEnabled))
	}
	if in.AuthorizationSettings != nil {
		const prefix string = ",\"authorizationSettings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.AuthorizationSettings).MarshalJSON())
	}
	if in.BaseURL != "" {
		const prefix string = ",\"baseURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseURL))
	}
	if in.BearerOnly {
		const prefix string = ",\"bearerOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BearerOnly))
	}
	if in.ClientAuthenticatorType != "" {
		const prefix string = ",\"clientAuthenticatorType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientAuthenticatorType))
	}
	if in.ClientID != "" {
		const prefix string = ",\"clientID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientID))
	}
	if in.ConsentRequired {
		const prefix string = ",\"consentRequired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ConsentRequired))
	}
	if len(in.DefaultClientScopes) != 0 {
		const prefix string = ",\"defaultClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.DefaultClientScopes {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	if len(in.DefaultRoles) != 0 {
		const prefix string = ",\"defaultRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.DefaultRoles {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.DirectAccessGrantsEnabled {
		const prefix string = ",\"directAccessGrantsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DirectAccessGrantsEnabled))
	}
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	if in.FrontChannelLogout {
		const prefix string = ",\"frontChannelLogout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.FrontChannelLogout))
	}
	if in.FullScopeAllowed {
		const prefix string = ",\"fullScopeAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.FullScopeAllowed))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.ImplicitFlowEnabled {
		const prefix string = ",\"implicitFlowEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ImplicitFlowEnabled))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.NodeRegistrationTimeout != nil {
		const prefix string = ",\"nodeRegistrationTimeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.NodeRegistrationTimeout).MarshalJSON())
	}
	if in.NotBefore != nil {
		const prefix string = ",\"notBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if len(in.OptionalClientScopes) != 0 {
		const prefix string = ",\"optionalClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.OptionalClientScopes {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if in.Origin != "" {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	if len(in.ProtocolMappers) != 0 {
		const prefix string = ",\"protocolMappers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.ProtocolMappers {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.Raw((v52).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.PublicClient {
		const prefix string = ",\"publicClient\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PublicClient))
	}
	if len(in.RedirectURIs) != 0 {
		const prefix string = ",\"redirectURIs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.RedirectURIs {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	if len(in.RegisteredNodes) != 0 {
		const prefix string = ",\"registeredNodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.RegisteredNodes {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				if m, ok := v55Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v55Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v55Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.RegistrationAccessToken != "" {
		const prefix string = ",\"registrationAccessToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegistrationAccessToken))
	}
	if in.RootURL != "" {
		const prefix string = ",\"rootURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootURL))
	}
	if in.Secret != "" {
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Secret))
	}
	if in.ServiceAccountsEnabled {
		const prefix string = ",\"serviceAccountsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ServiceAccountsEnabled))
	}
	if in.StandardFlowEnabled {
		const prefix string = ",\"standardFlowEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.StandardFlowEnabled))
	}
	if in.SurrogateAuthRequired {
		const prefix string = ",\"surrogateAuthRequired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SurrogateAuthRequired))
	}
	if len(in.WebOrigins) != 0 {
		const prefix string = ",\"webOrigins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.WebOrigins {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c8673aaEncodeGithubComAzukaKeycloakAdminGoKeycloakModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c8673aaDecodeGithubComAzukaKeycloakAdminGoKeycloakModels5(l, v)
}
