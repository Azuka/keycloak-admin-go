// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package keycloak

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	url "net/url"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak(in *jlexer.Lexer, out *UserFederationProviderRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "changedSyncPeriod":
			out.ChangedSyncPeriod = int32(in.Int32())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Config)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "displayName":
			out.DisplayName = string(in.String())
		case "fullSyncPeriod":
			out.FullSyncPeriod = int32(in.Int32())
		case "id":
			out.ID = string(in.String())
		case "lastSync":
			out.LastSync = int(in.Int())
		case "priority":
			out.Priority = int32(in.Int32())
		case "providerName":
			out.ProviderName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak(out *jwriter.Writer, in UserFederationProviderRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChangedSyncPeriod != 0 {
		const prefix string = ",\"changedSyncPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ChangedSyncPeriod))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Config {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.FullSyncPeriod != 0 {
		const prefix string = ",\"fullSyncPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FullSyncPeriod))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.LastSync != 0 {
		const prefix string = ",\"lastSync\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastSync))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Priority))
	}
	if in.ProviderName != "" {
		const prefix string = ",\"providerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFederationProviderRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFederationProviderRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFederationProviderRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFederationProviderRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak1(in *jlexer.Lexer, out *UserFederationMapperRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Config)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "federationMapperType":
			out.FederationMapperType = string(in.String())
		case "federationProviderDisplayName":
			out.FederationProviderDisplayName = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak1(out *jwriter.Writer, in UserFederationMapperRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Config {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.FederationMapperType != "" {
		const prefix string = ",\"federationMapperType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FederationMapperType))
	}
	if in.FederationProviderDisplayName != "" {
		const prefix string = ",\"federationProviderDisplayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FederationProviderDisplayName))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFederationMapperRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFederationMapperRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFederationMapperRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFederationMapperRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak1(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak2(in *jlexer.Lexer, out *ScopeMappingRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client":
			out.Client = string(in.String())
		case "clientScope":
			out.ClientScope = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Roles = append(out.Roles, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "self":
			out.Self = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak2(out *jwriter.Writer, in ScopeMappingRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Client != "" {
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Client))
	}
	if in.ClientScope != "" {
		const prefix string = ",\"clientScope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientScope))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Roles {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if in.Self != "" {
		const prefix string = ",\"self\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Self))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScopeMappingRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScopeMappingRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScopeMappingRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScopeMappingRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak2(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak3(in *jlexer.Lexer, out *RolesRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Client = make(AttributeMap)
				} else {
					out.Client = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 interface{}
					if m, ok := v8.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v8.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v8 = in.Interface()
					}
					(out.Client)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "realm":
			if in.IsNull() {
				in.Skip()
				out.Realm = nil
			} else {
				in.Delim('[')
				if out.Realm == nil {
					if !in.IsDelim(']') {
						out.Realm = make([]RoleRepresentation, 0, 1)
					} else {
						out.Realm = []RoleRepresentation{}
					}
				} else {
					out.Realm = (out.Realm)[:0]
				}
				for !in.IsDelim(']') {
					var v9 RoleRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v9).UnmarshalJSON(data))
					}
					out.Realm = append(out.Realm, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak3(out *jwriter.Writer, in RolesRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Client == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Client {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if m, ok := v10Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v10Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v10Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"realm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Realm == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Realm {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Raw((v12).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RolesRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RolesRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RolesRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RolesRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak3(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak4(in *jlexer.Lexer, out *RoleRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientRole":
			if in.IsNull() {
				in.Skip()
				out.ClientRole = nil
			} else {
				if out.ClientRole == nil {
					out.ClientRole = new(bool)
				}
				*out.ClientRole = bool(in.Bool())
			}
		case "composite":
			if in.IsNull() {
				in.Skip()
				out.Composite = nil
			} else {
				if out.Composite == nil {
					out.Composite = new(bool)
				}
				*out.Composite = bool(in.Bool())
			}
		case "composites":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Composites).UnmarshalJSON(data))
			}
		case "containerID":
			out.ContainerID = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak4(out *jwriter.Writer, in RoleRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClientRole != nil {
		const prefix string = ",\"clientRole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.ClientRole))
	}
	if in.Composite != nil {
		const prefix string = ",\"composite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Composite))
	}
	if true {
		const prefix string = ",\"composites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Composites).MarshalJSON())
	}
	if in.ContainerID != "" {
		const prefix string = ",\"containerID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContainerID))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoleRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoleRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak4(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak5(in *jlexer.Lexer, out *RoleComposites) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Client = make(AttributeMap)
				} else {
					out.Client = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 interface{}
					if m, ok := v13.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v13.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v13 = in.Interface()
					}
					(out.Client)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "realm":
			if in.IsNull() {
				in.Skip()
				out.Realm = nil
			} else {
				in.Delim('[')
				if out.Realm == nil {
					if !in.IsDelim(']') {
						out.Realm = make([]string, 0, 4)
					} else {
						out.Realm = []string{}
					}
				} else {
					out.Realm = (out.Realm)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.Realm = append(out.Realm, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak5(out *jwriter.Writer, in RoleComposites) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Client) != 0 {
		const prefix string = ",\"client\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Client {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				if m, ok := v15Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Realm) != 0 {
		const prefix string = ",\"realm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Realm {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoleComposites) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleComposites) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoleComposites) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleComposites) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak5(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak6(in *jlexer.Lexer, out *RequiredActionProviderRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alias":
			out.Alias = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 interface{}
					if m, ok := v18.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v18.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v18 = in.Interface()
					}
					(out.Config)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "defaultAction":
			if in.IsNull() {
				in.Skip()
				out.DefaultAction = nil
			} else {
				if out.DefaultAction == nil {
					out.DefaultAction = new(bool)
				}
				*out.DefaultAction = bool(in.Bool())
			}
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		case "providerID":
			out.ProviderID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak6(out *jwriter.Writer, in RequiredActionProviderRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Alias))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Config {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if m, ok := v19Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.DefaultAction != nil {
		const prefix string = ",\"defaultAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DefaultAction))
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ProviderID != "" {
		const prefix string = ",\"providerID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequiredActionProviderRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequiredActionProviderRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequiredActionProviderRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequiredActionProviderRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak6(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak7(in *jlexer.Lexer, out *RealmRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessCodeLifespan":
			out.AccessCodeLifespan = int(in.Int())
		case "accessCodeLifespanLogin":
			out.AccessCodeLifespanLogin = int(in.Int())
		case "accessCodeLifespanUserAction":
			out.AccessCodeLifespanUserAction = int(in.Int())
		case "accessTokenLifespan":
			out.AccessTokenLifespan = int(in.Int())
		case "accessTokenLifespanForImplicitFlow":
			out.AccessTokenLifespanForImplicitFlow = int(in.Int())
		case "accountTheme":
			out.AccountTheme = string(in.String())
		case "actionTokenGeneratedByAdminLifespan":
			out.ActionTokenGeneratedByAdminLifespan = int(in.Int())
		case "actionTokenGeneratedByUserLifespan":
			out.ActionTokenGeneratedByUserLifespan = int(in.Int())
		case "adminEventsDetailsEnabled":
			if in.IsNull() {
				in.Skip()
				out.AdminEventsDetailsEnabled = nil
			} else {
				if out.AdminEventsDetailsEnabled == nil {
					out.AdminEventsDetailsEnabled = new(bool)
				}
				*out.AdminEventsDetailsEnabled = bool(in.Bool())
			}
		case "adminEventsEnabled":
			if in.IsNull() {
				in.Skip()
				out.AdminEventsEnabled = nil
			} else {
				if out.AdminEventsEnabled == nil {
					out.AdminEventsEnabled = new(bool)
				}
				*out.AdminEventsEnabled = bool(in.Bool())
			}
		case "adminTheme":
			out.AdminTheme = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 interface{}
					if m, ok := v20.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v20.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v20 = in.Interface()
					}
					(out.Attributes)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "authenticationFlows":
			if in.IsNull() {
				in.Skip()
				out.AuthenticationFlows = nil
			} else {
				in.Delim('[')
				if out.AuthenticationFlows == nil {
					if !in.IsDelim(']') {
						out.AuthenticationFlows = make([]AuthenticationFlowRepresentation, 0, 1)
					} else {
						out.AuthenticationFlows = []AuthenticationFlowRepresentation{}
					}
				} else {
					out.AuthenticationFlows = (out.AuthenticationFlows)[:0]
				}
				for !in.IsDelim(']') {
					var v21 AuthenticationFlowRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v21).UnmarshalJSON(data))
					}
					out.AuthenticationFlows = append(out.AuthenticationFlows, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "authenticatorConfig":
			if in.IsNull() {
				in.Skip()
				out.AuthenticatorConfig = nil
			} else {
				in.Delim('[')
				if out.AuthenticatorConfig == nil {
					if !in.IsDelim(']') {
						out.AuthenticatorConfig = make([]AuthenticatorConfigRepresentation, 0, 1)
					} else {
						out.AuthenticatorConfig = []AuthenticatorConfigRepresentation{}
					}
				} else {
					out.AuthenticatorConfig = (out.AuthenticatorConfig)[:0]
				}
				for !in.IsDelim(']') {
					var v22 AuthenticatorConfigRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v22).UnmarshalJSON(data))
					}
					out.AuthenticatorConfig = append(out.AuthenticatorConfig, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "browserFlow":
			out.BrowserFlow = string(in.String())
		case "browserSecurityHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BrowserSecurityHeaders = make(AttributeMap)
				} else {
					out.BrowserSecurityHeaders = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 interface{}
					if m, ok := v23.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v23.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v23 = in.Interface()
					}
					(out.BrowserSecurityHeaders)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "bruteForceProtected":
			if in.IsNull() {
				in.Skip()
				out.BruteForceProtected = nil
			} else {
				if out.BruteForceProtected == nil {
					out.BruteForceProtected = new(bool)
				}
				*out.BruteForceProtected = bool(in.Bool())
			}
		case "clientAuthenticationFlow":
			out.ClientAuthenticationFlow = string(in.String())
		case "clientScopeMappings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ClientScopeMappings = make(AttributeMap)
				} else {
					out.ClientScopeMappings = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v24 interface{}
					if m, ok := v24.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v24.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v24 = in.Interface()
					}
					(out.ClientScopeMappings)[key] = v24
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientScopes":
			if in.IsNull() {
				in.Skip()
				out.ClientScopes = nil
			} else {
				in.Delim('[')
				if out.ClientScopes == nil {
					if !in.IsDelim(']') {
						out.ClientScopes = make([]ClientScopeRepresentation, 0, 1)
					} else {
						out.ClientScopes = []ClientScopeRepresentation{}
					}
				} else {
					out.ClientScopes = (out.ClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 ClientScopeRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v25).UnmarshalJSON(data))
					}
					out.ClientScopes = append(out.ClientScopes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clients":
			if in.IsNull() {
				in.Skip()
				out.Clients = nil
			} else {
				in.Delim('[')
				if out.Clients == nil {
					if !in.IsDelim(']') {
						out.Clients = make([]ClientRepresentation, 0, 1)
					} else {
						out.Clients = []ClientRepresentation{}
					}
				} else {
					out.Clients = (out.Clients)[:0]
				}
				for !in.IsDelim(']') {
					var v26 ClientRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v26).UnmarshalJSON(data))
					}
					out.Clients = append(out.Clients, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "components":
			easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak8(in, &out.Components)
		case "defaultDefaultClientScopes":
			if in.IsNull() {
				in.Skip()
				out.DefaultDefaultClientScopes = nil
			} else {
				in.Delim('[')
				if out.DefaultDefaultClientScopes == nil {
					if !in.IsDelim(']') {
						out.DefaultDefaultClientScopes = make([]string, 0, 4)
					} else {
						out.DefaultDefaultClientScopes = []string{}
					}
				} else {
					out.DefaultDefaultClientScopes = (out.DefaultDefaultClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.DefaultDefaultClientScopes = append(out.DefaultDefaultClientScopes, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultGroups":
			if in.IsNull() {
				in.Skip()
				out.DefaultGroups = nil
			} else {
				in.Delim('[')
				if out.DefaultGroups == nil {
					if !in.IsDelim(']') {
						out.DefaultGroups = make([]string, 0, 4)
					} else {
						out.DefaultGroups = []string{}
					}
				} else {
					out.DefaultGroups = (out.DefaultGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.DefaultGroups = append(out.DefaultGroups, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultLocale":
			out.DefaultLocale = string(in.String())
		case "defaultOptionalClientScopes":
			if in.IsNull() {
				in.Skip()
				out.DefaultOptionalClientScopes = nil
			} else {
				in.Delim('[')
				if out.DefaultOptionalClientScopes == nil {
					if !in.IsDelim(']') {
						out.DefaultOptionalClientScopes = make([]string, 0, 4)
					} else {
						out.DefaultOptionalClientScopes = []string{}
					}
				} else {
					out.DefaultOptionalClientScopes = (out.DefaultOptionalClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.DefaultOptionalClientScopes = append(out.DefaultOptionalClientScopes, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultRoles":
			if in.IsNull() {
				in.Skip()
				out.DefaultRoles = nil
			} else {
				in.Delim('[')
				if out.DefaultRoles == nil {
					if !in.IsDelim(']') {
						out.DefaultRoles = make([]string, 0, 4)
					} else {
						out.DefaultRoles = []string{}
					}
				} else {
					out.DefaultRoles = (out.DefaultRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.DefaultRoles = append(out.DefaultRoles, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "directGrantFlow":
			out.DirectGrantFlow = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "displayNameHtml":
			out.DisplayNameHTML = string(in.String())
		case "dockerAuthenticationFlow":
			out.DockerAuthenticationFlow = string(in.String())
		case "duplicateEmailsAllowed":
			if in.IsNull() {
				in.Skip()
				out.DuplicateEmailsAllowed = nil
			} else {
				if out.DuplicateEmailsAllowed == nil {
					out.DuplicateEmailsAllowed = new(bool)
				}
				*out.DuplicateEmailsAllowed = bool(in.Bool())
			}
		case "editUsernameAllowed":
			if in.IsNull() {
				in.Skip()
				out.EditUsernameAllowed = nil
			} else {
				if out.EditUsernameAllowed == nil {
					out.EditUsernameAllowed = new(bool)
				}
				*out.EditUsernameAllowed = bool(in.Bool())
			}
		case "emailTheme":
			out.EmailTheme = string(in.String())
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "enabledEventTypes":
			if in.IsNull() {
				in.Skip()
				out.EnabledEventTypes = nil
			} else {
				in.Delim('[')
				if out.EnabledEventTypes == nil {
					if !in.IsDelim(']') {
						out.EnabledEventTypes = make([]string, 0, 4)
					} else {
						out.EnabledEventTypes = []string{}
					}
				} else {
					out.EnabledEventTypes = (out.EnabledEventTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.EnabledEventTypes = append(out.EnabledEventTypes, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventsEnabled":
			if in.IsNull() {
				in.Skip()
				out.EventsEnabled = nil
			} else {
				if out.EventsEnabled == nil {
					out.EventsEnabled = new(bool)
				}
				*out.EventsEnabled = bool(in.Bool())
			}
		case "eventsExpiration":
			out.EventsExpiration = int(in.Int())
		case "eventsListeners":
			if in.IsNull() {
				in.Skip()
				out.EventsListeners = nil
			} else {
				in.Delim('[')
				if out.EventsListeners == nil {
					if !in.IsDelim(']') {
						out.EventsListeners = make([]string, 0, 4)
					} else {
						out.EventsListeners = []string{}
					}
				} else {
					out.EventsListeners = (out.EventsListeners)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.EventsListeners = append(out.EventsListeners, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failureFactor":
			out.FailureFactor = int(in.Int())
		case "federatedUsers":
			if in.IsNull() {
				in.Skip()
				out.FederatedUsers = nil
			} else {
				in.Delim('[')
				if out.FederatedUsers == nil {
					if !in.IsDelim(']') {
						out.FederatedUsers = make([]UserRepresentation, 0, 1)
					} else {
						out.FederatedUsers = []UserRepresentation{}
					}
				} else {
					out.FederatedUsers = (out.FederatedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v33 UserRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak9(in, &v33)
					out.FederatedUsers = append(out.FederatedUsers, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupRepresentation, 0, 1)
					} else {
						out.Groups = []GroupRepresentation{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v34 GroupRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak10(in, &v34)
					out.Groups = append(out.Groups, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "identityProviderMappers":
			if in.IsNull() {
				in.Skip()
				out.IdentityProviderMappers = nil
			} else {
				in.Delim('[')
				if out.IdentityProviderMappers == nil {
					if !in.IsDelim(']') {
						out.IdentityProviderMappers = make([]IdentityProviderMapperRepresentation, 0, 1)
					} else {
						out.IdentityProviderMappers = []IdentityProviderMapperRepresentation{}
					}
				} else {
					out.IdentityProviderMappers = (out.IdentityProviderMappers)[:0]
				}
				for !in.IsDelim(']') {
					var v35 IdentityProviderMapperRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v35).UnmarshalJSON(data))
					}
					out.IdentityProviderMappers = append(out.IdentityProviderMappers, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identityProviders":
			if in.IsNull() {
				in.Skip()
				out.IdentityProviders = nil
			} else {
				in.Delim('[')
				if out.IdentityProviders == nil {
					if !in.IsDelim(']') {
						out.IdentityProviders = make([]IdentityProviderRepresentation, 0, 1)
					} else {
						out.IdentityProviders = []IdentityProviderRepresentation{}
					}
				} else {
					out.IdentityProviders = (out.IdentityProviders)[:0]
				}
				for !in.IsDelim(']') {
					var v36 IdentityProviderRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v36).UnmarshalJSON(data))
					}
					out.IdentityProviders = append(out.IdentityProviders, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "internationalizationEnabled":
			if in.IsNull() {
				in.Skip()
				out.InternationalizationEnabled = nil
			} else {
				if out.InternationalizationEnabled == nil {
					out.InternationalizationEnabled = new(bool)
				}
				*out.InternationalizationEnabled = bool(in.Bool())
			}
		case "keycloakVersion":
			out.KeycloakVersion = string(in.String())
		case "loginTheme":
			out.LoginTheme = string(in.String())
		case "loginWithEmailAllowed":
			if in.IsNull() {
				in.Skip()
				out.LoginWithEmailAllowed = nil
			} else {
				if out.LoginWithEmailAllowed == nil {
					out.LoginWithEmailAllowed = new(bool)
				}
				*out.LoginWithEmailAllowed = bool(in.Bool())
			}
		case "maxDeltaTimeSeconds":
			out.MaxDeltaTimeSeconds = int(in.Int())
		case "maxFailureWaitSeconds":
			out.MaxFailureWaitSeconds = int(in.Int())
		case "minimumQuickLoginWaitSeconds":
			out.MinimumQuickLoginWaitSeconds = int(in.Int())
		case "notBefore":
			out.NotBefore = int(in.Int())
		case "offlineSessionIdleTimeout":
			out.OfflineSessionIdleTimeout = int(in.Int())
		case "otpPolicyAlgorithm":
			out.OtpPolicyAlgorithm = string(in.String())
		case "otpPolicyDigits":
			out.OtpPolicyDigits = int(in.Int())
		case "otpPolicyLookAheadWindow":
			out.OtpPolicyLookAheadWindow = int(in.Int())
		case "otpPolicyPeriod":
			out.OtpPolicyPeriod = int(in.Int())
		case "otpPolicyType":
			out.OtpPolicyType = string(in.String())
		case "otpSupportedApplications":
			if in.IsNull() {
				in.Skip()
				out.OtpSupportedApplications = nil
			} else {
				in.Delim('[')
				if out.OtpSupportedApplications == nil {
					if !in.IsDelim(']') {
						out.OtpSupportedApplications = make([]string, 0, 4)
					} else {
						out.OtpSupportedApplications = []string{}
					}
				} else {
					out.OtpSupportedApplications = (out.OtpSupportedApplications)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.OtpSupportedApplications = append(out.OtpSupportedApplications, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "passwordPolicy":
			out.PasswordPolicy = string(in.String())
		case "permanentLockout":
			if in.IsNull() {
				in.Skip()
				out.PermanentLockout = nil
			} else {
				if out.PermanentLockout == nil {
					out.PermanentLockout = new(bool)
				}
				*out.PermanentLockout = bool(in.Bool())
			}
		case "protocolMappers":
			if in.IsNull() {
				in.Skip()
				out.ProtocolMappers = nil
			} else {
				in.Delim('[')
				if out.ProtocolMappers == nil {
					if !in.IsDelim(']') {
						out.ProtocolMappers = make([]ProtocolMapperRepresentation, 0, 1)
					} else {
						out.ProtocolMappers = []ProtocolMapperRepresentation{}
					}
				} else {
					out.ProtocolMappers = (out.ProtocolMappers)[:0]
				}
				for !in.IsDelim(']') {
					var v38 ProtocolMapperRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v38).UnmarshalJSON(data))
					}
					out.ProtocolMappers = append(out.ProtocolMappers, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "quickLoginCheckMilliSeconds":
			out.QuickLoginCheckMilliSeconds = int(in.Int())
		case "realm":
			out.Realm = string(in.String())
		case "refreshTokenMaxReuse":
			out.RefreshTokenMaxReuse = int(in.Int())
		case "registrationAllowed":
			if in.IsNull() {
				in.Skip()
				out.RegistrationAllowed = nil
			} else {
				if out.RegistrationAllowed == nil {
					out.RegistrationAllowed = new(bool)
				}
				*out.RegistrationAllowed = bool(in.Bool())
			}
		case "registrationEmailAsUsername":
			if in.IsNull() {
				in.Skip()
				out.RegistrationEmailAsUsername = nil
			} else {
				if out.RegistrationEmailAsUsername == nil {
					out.RegistrationEmailAsUsername = new(bool)
				}
				*out.RegistrationEmailAsUsername = bool(in.Bool())
			}
		case "registrationFlow":
			out.RegistrationFlow = string(in.String())
		case "rememberMe":
			if in.IsNull() {
				in.Skip()
				out.RememberMe = nil
			} else {
				if out.RememberMe == nil {
					out.RememberMe = new(bool)
				}
				*out.RememberMe = bool(in.Bool())
			}
		case "requiredActions":
			if in.IsNull() {
				in.Skip()
				out.RequiredActions = nil
			} else {
				in.Delim('[')
				if out.RequiredActions == nil {
					if !in.IsDelim(']') {
						out.RequiredActions = make([]RequiredActionProviderRepresentation, 0, 1)
					} else {
						out.RequiredActions = []RequiredActionProviderRepresentation{}
					}
				} else {
					out.RequiredActions = (out.RequiredActions)[:0]
				}
				for !in.IsDelim(']') {
					var v39 RequiredActionProviderRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v39).UnmarshalJSON(data))
					}
					out.RequiredActions = append(out.RequiredActions, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resetCredentialsFlow":
			out.ResetCredentialsFlow = string(in.String())
		case "resetPasswordAllowed":
			if in.IsNull() {
				in.Skip()
				out.ResetPasswordAllowed = nil
			} else {
				if out.ResetPasswordAllowed == nil {
					out.ResetPasswordAllowed = new(bool)
				}
				*out.ResetPasswordAllowed = bool(in.Bool())
			}
		case "revokeRefreshToken":
			if in.IsNull() {
				in.Skip()
				out.RevokeRefreshToken = nil
			} else {
				if out.RevokeRefreshToken == nil {
					out.RevokeRefreshToken = new(bool)
				}
				*out.RevokeRefreshToken = bool(in.Bool())
			}
		case "roles":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Roles).UnmarshalJSON(data))
			}
		case "scopeMappings":
			if in.IsNull() {
				in.Skip()
				out.ScopeMappings = nil
			} else {
				in.Delim('[')
				if out.ScopeMappings == nil {
					if !in.IsDelim(']') {
						out.ScopeMappings = make([]ScopeMappingRepresentation, 0, 1)
					} else {
						out.ScopeMappings = []ScopeMappingRepresentation{}
					}
				} else {
					out.ScopeMappings = (out.ScopeMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v40 ScopeMappingRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v40).UnmarshalJSON(data))
					}
					out.ScopeMappings = append(out.ScopeMappings, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "smtpServer":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SMTPServer = make(AttributeMap)
				} else {
					out.SMTPServer = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v41 interface{}
					if m, ok := v41.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v41.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v41 = in.Interface()
					}
					(out.SMTPServer)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sslRequired":
			out.SslRequired = string(in.String())
		case "ssoSessionIdleTimeout":
			out.SsoSessionIdleTimeout = int(in.Int())
		case "ssoSessionMaxLifespan":
			out.SsoSessionMaxLifespan = int(in.Int())
		case "supportedLocales":
			if in.IsNull() {
				in.Skip()
				out.SupportedLocales = nil
			} else {
				in.Delim('[')
				if out.SupportedLocales == nil {
					if !in.IsDelim(']') {
						out.SupportedLocales = make([]string, 0, 4)
					} else {
						out.SupportedLocales = []string{}
					}
				} else {
					out.SupportedLocales = (out.SupportedLocales)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.SupportedLocales = append(out.SupportedLocales, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "userFederationMappers":
			if in.IsNull() {
				in.Skip()
				out.UserFederationMappers = nil
			} else {
				in.Delim('[')
				if out.UserFederationMappers == nil {
					if !in.IsDelim(']') {
						out.UserFederationMappers = make([]UserFederationMapperRepresentation, 0, 1)
					} else {
						out.UserFederationMappers = []UserFederationMapperRepresentation{}
					}
				} else {
					out.UserFederationMappers = (out.UserFederationMappers)[:0]
				}
				for !in.IsDelim(']') {
					var v43 UserFederationMapperRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v43).UnmarshalJSON(data))
					}
					out.UserFederationMappers = append(out.UserFederationMappers, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "userFederationProviders":
			if in.IsNull() {
				in.Skip()
				out.UserFederationProviders = nil
			} else {
				in.Delim('[')
				if out.UserFederationProviders == nil {
					if !in.IsDelim(']') {
						out.UserFederationProviders = make([]UserFederationProviderRepresentation, 0, 1)
					} else {
						out.UserFederationProviders = []UserFederationProviderRepresentation{}
					}
				} else {
					out.UserFederationProviders = (out.UserFederationProviders)[:0]
				}
				for !in.IsDelim(']') {
					var v44 UserFederationProviderRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v44).UnmarshalJSON(data))
					}
					out.UserFederationProviders = append(out.UserFederationProviders, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "userManagedAccessAllowed":
			if in.IsNull() {
				in.Skip()
				out.UserManagedAccessAllowed = nil
			} else {
				if out.UserManagedAccessAllowed == nil {
					out.UserManagedAccessAllowed = new(bool)
				}
				*out.UserManagedAccessAllowed = bool(in.Bool())
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserRepresentation, 0, 1)
					} else {
						out.Users = []UserRepresentation{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v45 UserRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak9(in, &v45)
					out.Users = append(out.Users, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "verifyEmail":
			if in.IsNull() {
				in.Skip()
				out.VerifyEmail = nil
			} else {
				if out.VerifyEmail == nil {
					out.VerifyEmail = new(bool)
				}
				*out.VerifyEmail = bool(in.Bool())
			}
		case "waitIncrementSeconds":
			out.WaitIncrementSeconds = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak7(out *jwriter.Writer, in RealmRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccessCodeLifespan != 0 {
		const prefix string = ",\"accessCodeLifespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AccessCodeLifespan))
	}
	if in.AccessCodeLifespanLogin != 0 {
		const prefix string = ",\"accessCodeLifespanLogin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AccessCodeLifespanLogin))
	}
	if in.AccessCodeLifespanUserAction != 0 {
		const prefix string = ",\"accessCodeLifespanUserAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AccessCodeLifespanUserAction))
	}
	if in.AccessTokenLifespan != 0 {
		const prefix string = ",\"accessTokenLifespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AccessTokenLifespan))
	}
	if in.AccessTokenLifespanForImplicitFlow != 0 {
		const prefix string = ",\"accessTokenLifespanForImplicitFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AccessTokenLifespanForImplicitFlow))
	}
	if in.AccountTheme != "" {
		const prefix string = ",\"accountTheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountTheme))
	}
	if in.ActionTokenGeneratedByAdminLifespan != 0 {
		const prefix string = ",\"actionTokenGeneratedByAdminLifespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ActionTokenGeneratedByAdminLifespan))
	}
	if in.ActionTokenGeneratedByUserLifespan != 0 {
		const prefix string = ",\"actionTokenGeneratedByUserLifespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ActionTokenGeneratedByUserLifespan))
	}
	if in.AdminEventsDetailsEnabled != nil {
		const prefix string = ",\"adminEventsDetailsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AdminEventsDetailsEnabled))
	}
	if in.AdminEventsEnabled != nil {
		const prefix string = ",\"adminEventsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AdminEventsEnabled))
	}
	if in.AdminTheme != "" {
		const prefix string = ",\"adminTheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdminTheme))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.Attributes {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v46Name))
				out.RawByte(':')
				if m, ok := v46Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v46Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v46Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.AuthenticationFlows) != 0 {
		const prefix string = ",\"authenticationFlows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.AuthenticationFlows {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Raw((v48).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.AuthenticatorConfig) != 0 {
		const prefix string = ",\"authenticatorConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.AuthenticatorConfig {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.Raw((v50).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.BrowserFlow != "" {
		const prefix string = ",\"browserFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BrowserFlow))
	}
	if len(in.BrowserSecurityHeaders) != 0 {
		const prefix string = ",\"browserSecurityHeaders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v51First := true
			for v51Name, v51Value := range in.BrowserSecurityHeaders {
				if v51First {
					v51First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v51Name))
				out.RawByte(':')
				if m, ok := v51Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v51Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v51Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.BruteForceProtected != nil {
		const prefix string = ",\"bruteForceProtected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.BruteForceProtected))
	}
	if in.ClientAuthenticationFlow != "" {
		const prefix string = ",\"clientAuthenticationFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientAuthenticationFlow))
	}
	if len(in.ClientScopeMappings) != 0 {
		const prefix string = ",\"clientScopeMappings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v52First := true
			for v52Name, v52Value := range in.ClientScopeMappings {
				if v52First {
					v52First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v52Name))
				out.RawByte(':')
				if m, ok := v52Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v52Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v52Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientScopes) != 0 {
		const prefix string = ",\"clientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.ClientScopes {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.Raw((v54).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Clients) != 0 {
		const prefix string = ",\"clients\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v55, v56 := range in.Clients {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.Raw((v56).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"components\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak8(out, in.Components)
	}
	if len(in.DefaultDefaultClientScopes) != 0 {
		const prefix string = ",\"defaultDefaultClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v57, v58 := range in.DefaultDefaultClientScopes {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.String(string(v58))
			}
			out.RawByte(']')
		}
	}
	if len(in.DefaultGroups) != 0 {
		const prefix string = ",\"defaultGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.DefaultGroups {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	if in.DefaultLocale != "" {
		const prefix string = ",\"defaultLocale\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultLocale))
	}
	if len(in.DefaultOptionalClientScopes) != 0 {
		const prefix string = ",\"defaultOptionalClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v61, v62 := range in.DefaultOptionalClientScopes {
				if v61 > 0 {
					out.RawByte(',')
				}
				out.String(string(v62))
			}
			out.RawByte(']')
		}
	}
	if len(in.DefaultRoles) != 0 {
		const prefix string = ",\"defaultRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v63, v64 := range in.DefaultRoles {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if in.DirectGrantFlow != "" {
		const prefix string = ",\"directGrantFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DirectGrantFlow))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.DisplayNameHTML != "" {
		const prefix string = ",\"displayNameHtml\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayNameHTML))
	}
	if in.DockerAuthenticationFlow != "" {
		const prefix string = ",\"dockerAuthenticationFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DockerAuthenticationFlow))
	}
	if in.DuplicateEmailsAllowed != nil {
		const prefix string = ",\"duplicateEmailsAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DuplicateEmailsAllowed))
	}
	if in.EditUsernameAllowed != nil {
		const prefix string = ",\"editUsernameAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EditUsernameAllowed))
	}
	if in.EmailTheme != "" {
		const prefix string = ",\"emailTheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EmailTheme))
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if len(in.EnabledEventTypes) != 0 {
		const prefix string = ",\"enabledEventTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.EnabledEventTypes {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if in.EventsEnabled != nil {
		const prefix string = ",\"eventsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EventsEnabled))
	}
	if in.EventsExpiration != 0 {
		const prefix string = ",\"eventsExpiration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EventsExpiration))
	}
	if len(in.EventsListeners) != 0 {
		const prefix string = ",\"eventsListeners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v67, v68 := range in.EventsListeners {
				if v67 > 0 {
					out.RawByte(',')
				}
				out.String(string(v68))
			}
			out.RawByte(']')
		}
	}
	if in.FailureFactor != 0 {
		const prefix string = ",\"failureFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FailureFactor))
	}
	if len(in.FederatedUsers) != 0 {
		const prefix string = ",\"federatedUsers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v69, v70 := range in.FederatedUsers {
				if v69 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak9(out, v70)
			}
			out.RawByte(']')
		}
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.Groups {
				if v71 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak10(out, v72)
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if len(in.IdentityProviderMappers) != 0 {
		const prefix string = ",\"identityProviderMappers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v73, v74 := range in.IdentityProviderMappers {
				if v73 > 0 {
					out.RawByte(',')
				}
				out.Raw((v74).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.IdentityProviders) != 0 {
		const prefix string = ",\"identityProviders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.IdentityProviders {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.Raw((v76).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.InternationalizationEnabled != nil {
		const prefix string = ",\"internationalizationEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InternationalizationEnabled))
	}
	if in.KeycloakVersion != "" {
		const prefix string = ",\"keycloakVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeycloakVersion))
	}
	if in.LoginTheme != "" {
		const prefix string = ",\"loginTheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LoginTheme))
	}
	if in.LoginWithEmailAllowed != nil {
		const prefix string = ",\"loginWithEmailAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.LoginWithEmailAllowed))
	}
	if in.MaxDeltaTimeSeconds != 0 {
		const prefix string = ",\"maxDeltaTimeSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxDeltaTimeSeconds))
	}
	if in.MaxFailureWaitSeconds != 0 {
		const prefix string = ",\"maxFailureWaitSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxFailureWaitSeconds))
	}
	if in.MinimumQuickLoginWaitSeconds != 0 {
		const prefix string = ",\"minimumQuickLoginWaitSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinimumQuickLoginWaitSeconds))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"notBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NotBefore))
	}
	if in.OfflineSessionIdleTimeout != 0 {
		const prefix string = ",\"offlineSessionIdleTimeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OfflineSessionIdleTimeout))
	}
	if in.OtpPolicyAlgorithm != "" {
		const prefix string = ",\"otpPolicyAlgorithm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OtpPolicyAlgorithm))
	}
	if in.OtpPolicyDigits != 0 {
		const prefix string = ",\"otpPolicyDigits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OtpPolicyDigits))
	}
	if in.OtpPolicyLookAheadWindow != 0 {
		const prefix string = ",\"otpPolicyLookAheadWindow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OtpPolicyLookAheadWindow))
	}
	if in.OtpPolicyPeriod != 0 {
		const prefix string = ",\"otpPolicyPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OtpPolicyPeriod))
	}
	if in.OtpPolicyType != "" {
		const prefix string = ",\"otpPolicyType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OtpPolicyType))
	}
	if len(in.OtpSupportedApplications) != 0 {
		const prefix string = ",\"otpSupportedApplications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v77, v78 := range in.OtpSupportedApplications {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.String(string(v78))
			}
			out.RawByte(']')
		}
	}
	if in.PasswordPolicy != "" {
		const prefix string = ",\"passwordPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PasswordPolicy))
	}
	if in.PermanentLockout != nil {
		const prefix string = ",\"permanentLockout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.PermanentLockout))
	}
	if len(in.ProtocolMappers) != 0 {
		const prefix string = ",\"protocolMappers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v79, v80 := range in.ProtocolMappers {
				if v79 > 0 {
					out.RawByte(',')
				}
				out.Raw((v80).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.QuickLoginCheckMilliSeconds != 0 {
		const prefix string = ",\"quickLoginCheckMilliSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.QuickLoginCheckMilliSeconds))
	}
	if in.Realm != "" {
		const prefix string = ",\"realm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Realm))
	}
	if in.RefreshTokenMaxReuse != 0 {
		const prefix string = ",\"refreshTokenMaxReuse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RefreshTokenMaxReuse))
	}
	if in.RegistrationAllowed != nil {
		const prefix string = ",\"registrationAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RegistrationAllowed))
	}
	if in.RegistrationEmailAsUsername != nil {
		const prefix string = ",\"registrationEmailAsUsername\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RegistrationEmailAsUsername))
	}
	if in.RegistrationFlow != "" {
		const prefix string = ",\"registrationFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegistrationFlow))
	}
	if in.RememberMe != nil {
		const prefix string = ",\"rememberMe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RememberMe))
	}
	if len(in.RequiredActions) != 0 {
		const prefix string = ",\"requiredActions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v81, v82 := range in.RequiredActions {
				if v81 > 0 {
					out.RawByte(',')
				}
				out.Raw((v82).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.ResetCredentialsFlow != "" {
		const prefix string = ",\"resetCredentialsFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResetCredentialsFlow))
	}
	if in.ResetPasswordAllowed != nil {
		const prefix string = ",\"resetPasswordAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.ResetPasswordAllowed))
	}
	if in.RevokeRefreshToken != nil {
		const prefix string = ",\"revokeRefreshToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RevokeRefreshToken))
	}
	if true {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Roles).MarshalJSON())
	}
	if len(in.ScopeMappings) != 0 {
		const prefix string = ",\"scopeMappings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v83, v84 := range in.ScopeMappings {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.Raw((v84).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.SMTPServer) != 0 {
		const prefix string = ",\"smtpServer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v85First := true
			for v85Name, v85Value := range in.SMTPServer {
				if v85First {
					v85First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v85Name))
				out.RawByte(':')
				if m, ok := v85Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v85Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v85Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.SslRequired != "" {
		const prefix string = ",\"sslRequired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SslRequired))
	}
	if in.SsoSessionIdleTimeout != 0 {
		const prefix string = ",\"ssoSessionIdleTimeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SsoSessionIdleTimeout))
	}
	if in.SsoSessionMaxLifespan != 0 {
		const prefix string = ",\"ssoSessionMaxLifespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SsoSessionMaxLifespan))
	}
	if len(in.SupportedLocales) != 0 {
		const prefix string = ",\"supportedLocales\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.SupportedLocales {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.String(string(v87))
			}
			out.RawByte(']')
		}
	}
	if len(in.UserFederationMappers) != 0 {
		const prefix string = ",\"userFederationMappers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.UserFederationMappers {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.Raw((v89).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.UserFederationProviders) != 0 {
		const prefix string = ",\"userFederationProviders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.UserFederationProviders {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.Raw((v91).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.UserManagedAccessAllowed != nil {
		const prefix string = ",\"userManagedAccessAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.UserManagedAccessAllowed))
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.Users {
				if v92 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak9(out, v93)
			}
			out.RawByte(']')
		}
	}
	if in.VerifyEmail != nil {
		const prefix string = ",\"verifyEmail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.VerifyEmail))
	}
	if in.WaitIncrementSeconds != 0 {
		const prefix string = ",\"waitIncrementSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WaitIncrementSeconds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RealmRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RealmRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RealmRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RealmRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak7(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak10(in *jlexer.Lexer, out *GroupRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Access = make(AttributeMap)
				} else {
					out.Access = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v94 interface{}
					if m, ok := v94.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v94.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v94 = in.Interface()
					}
					(out.Access)[key] = v94
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v95 interface{}
					if m, ok := v95.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v95.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v95 = in.Interface()
					}
					(out.Attributes)[key] = v95
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientRoles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ClientRoles = make(AttributeMap)
				} else {
					out.ClientRoles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v96 interface{}
					if m, ok := v96.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v96.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v96 = in.Interface()
					}
					(out.ClientRoles)[key] = v96
					in.WantComma()
				}
				in.Delim('}')
			}
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "realmRoles":
			if in.IsNull() {
				in.Skip()
				out.RealmRoles = nil
			} else {
				in.Delim('[')
				if out.RealmRoles == nil {
					if !in.IsDelim(']') {
						out.RealmRoles = make([]string, 0, 4)
					} else {
						out.RealmRoles = []string{}
					}
				} else {
					out.RealmRoles = (out.RealmRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v97 string
					v97 = string(in.String())
					out.RealmRoles = append(out.RealmRoles, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subGroups":
			if in.IsNull() {
				in.Skip()
				out.SubGroups = nil
			} else {
				in.Delim('[')
				if out.SubGroups == nil {
					if !in.IsDelim(']') {
						out.SubGroups = make([]GroupRepresentation, 0, 1)
					} else {
						out.SubGroups = []GroupRepresentation{}
					}
				} else {
					out.SubGroups = (out.SubGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v98 GroupRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak10(in, &v98)
					out.SubGroups = append(out.SubGroups, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak10(out *jwriter.Writer, in GroupRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Access) != 0 {
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v99First := true
			for v99Name, v99Value := range in.Access {
				if v99First {
					v99First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v99Name))
				out.RawByte(':')
				if m, ok := v99Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v99Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v99Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v100First := true
			for v100Name, v100Value := range in.Attributes {
				if v100First {
					v100First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v100Name))
				out.RawByte(':')
				if m, ok := v100Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v100Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v100Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientRoles) != 0 {
		const prefix string = ",\"clientRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v101First := true
			for v101Name, v101Value := range in.ClientRoles {
				if v101First {
					v101First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v101Name))
				out.RawByte(':')
				if m, ok := v101Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v101Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v101Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if len(in.RealmRoles) != 0 {
		const prefix string = ",\"realmRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v102, v103 := range in.RealmRoles {
				if v102 > 0 {
					out.RawByte(',')
				}
				out.String(string(v103))
			}
			out.RawByte(']')
		}
	}
	if len(in.SubGroups) != 0 {
		const prefix string = ",\"subGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.SubGroups {
				if v104 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak10(out, v105)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak9(in *jlexer.Lexer, out *UserRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Access = make(AttributeMap)
				} else {
					out.Access = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v106 interface{}
					if m, ok := v106.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v106.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v106 = in.Interface()
					}
					(out.Access)[key] = v106
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v107 interface{}
					if m, ok := v107.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v107.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v107 = in.Interface()
					}
					(out.Attributes)[key] = v107
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientRoles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ClientRoles = make(AttributeMap)
				} else {
					out.ClientRoles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v108 interface{}
					if m, ok := v108.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v108.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v108 = in.Interface()
					}
					(out.ClientRoles)[key] = v108
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientConsents":
			if in.IsNull() {
				in.Skip()
				out.ClientConsents = nil
			} else {
				in.Delim('[')
				if out.ClientConsents == nil {
					if !in.IsDelim(']') {
						out.ClientConsents = make([]UserConsentRepresentation, 0, 1)
					} else {
						out.ClientConsents = []UserConsentRepresentation{}
					}
				} else {
					out.ClientConsents = (out.ClientConsents)[:0]
				}
				for !in.IsDelim(']') {
					var v109 UserConsentRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak11(in, &v109)
					out.ClientConsents = append(out.ClientConsents, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdTimestamp":
			if in.IsNull() {
				in.Skip()
				out.CreatedTimestamp = nil
			} else {
				if out.CreatedTimestamp == nil {
					out.CreatedTimestamp = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedTimestamp).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				in.Delim('[')
				if out.Credentials == nil {
					if !in.IsDelim(']') {
						out.Credentials = make([]CredentialRepresentation, 0, 1)
					} else {
						out.Credentials = []CredentialRepresentation{}
					}
				} else {
					out.Credentials = (out.Credentials)[:0]
				}
				for !in.IsDelim(']') {
					var v110 CredentialRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak12(in, &v110)
					out.Credentials = append(out.Credentials, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "disableCredentialTypes":
			if in.IsNull() {
				in.Skip()
				out.DisableCredentialTypes = nil
			} else {
				in.Delim('[')
				if out.DisableCredentialTypes == nil {
					if !in.IsDelim(']') {
						out.DisableCredentialTypes = make([]string, 0, 4)
					} else {
						out.DisableCredentialTypes = []string{}
					}
				} else {
					out.DisableCredentialTypes = (out.DisableCredentialTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v111 string
					v111 = string(in.String())
					out.DisableCredentialTypes = append(out.DisableCredentialTypes, v111)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "email":
			out.Email = string(in.String())
		case "emailVerified":
			if in.IsNull() {
				in.Skip()
				out.EmailVerified = nil
			} else {
				if out.EmailVerified == nil {
					out.EmailVerified = new(bool)
				}
				*out.EmailVerified = bool(in.Bool())
			}
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "federatedIdentities":
			if in.IsNull() {
				in.Skip()
				out.FederatedIdentities = nil
			} else {
				in.Delim('[')
				if out.FederatedIdentities == nil {
					if !in.IsDelim(']') {
						out.FederatedIdentities = make([]FederatedIdentityRepresentation, 0, 1)
					} else {
						out.FederatedIdentities = []FederatedIdentityRepresentation{}
					}
				} else {
					out.FederatedIdentities = (out.FederatedIdentities)[:0]
				}
				for !in.IsDelim(']') {
					var v112 FederatedIdentityRepresentation
					easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak13(in, &v112)
					out.FederatedIdentities = append(out.FederatedIdentities, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "federationLink":
			if in.IsNull() {
				in.Skip()
				out.FederationLink = nil
			} else {
				if out.FederationLink == nil {
					out.FederationLink = new(url.URL)
				}
				easyjson4c59d78cDecodeNetUrl(in, &*out.FederationLink)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]string, 0, 4)
					} else {
						out.Groups = []string{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v113 string
					v113 = string(in.String())
					out.Groups = append(out.Groups, v113)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "notBefore":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "origin":
			out.Origin = string(in.String())
		case "realmRoles":
			if in.IsNull() {
				in.Skip()
				out.RealmRoles = nil
			} else {
				in.Delim('[')
				if out.RealmRoles == nil {
					if !in.IsDelim(']') {
						out.RealmRoles = make([]string, 0, 4)
					} else {
						out.RealmRoles = []string{}
					}
				} else {
					out.RealmRoles = (out.RealmRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v114 string
					v114 = string(in.String())
					out.RealmRoles = append(out.RealmRoles, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredActions":
			if in.IsNull() {
				in.Skip()
				out.RequiredActions = nil
			} else {
				in.Delim('[')
				if out.RequiredActions == nil {
					if !in.IsDelim(']') {
						out.RequiredActions = make([]string, 0, 4)
					} else {
						out.RequiredActions = []string{}
					}
				} else {
					out.RequiredActions = (out.RequiredActions)[:0]
				}
				for !in.IsDelim(']') {
					var v115 string
					v115 = string(in.String())
					out.RequiredActions = append(out.RequiredActions, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "self":
			out.Self = string(in.String())
		case "serviceAccountClientId":
			out.ServiceAccountClientID = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak9(out *jwriter.Writer, in UserRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Access) != 0 {
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v116First := true
			for v116Name, v116Value := range in.Access {
				if v116First {
					v116First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v116Name))
				out.RawByte(':')
				if m, ok := v116Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v116Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v116Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v117First := true
			for v117Name, v117Value := range in.Attributes {
				if v117First {
					v117First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v117Name))
				out.RawByte(':')
				if m, ok := v117Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v117Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v117Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientRoles) != 0 {
		const prefix string = ",\"clientRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v118First := true
			for v118Name, v118Value := range in.ClientRoles {
				if v118First {
					v118First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v118Name))
				out.RawByte(':')
				if m, ok := v118Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v118Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v118Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientConsents) != 0 {
		const prefix string = ",\"clientConsents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v119, v120 := range in.ClientConsents {
				if v119 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak11(out, v120)
			}
			out.RawByte(']')
		}
	}
	if in.CreatedTimestamp != nil {
		const prefix string = ",\"createdTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedTimestamp).MarshalJSON())
	}
	if len(in.Credentials) != 0 {
		const prefix string = ",\"credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v121, v122 := range in.Credentials {
				if v121 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak12(out, v122)
			}
			out.RawByte(']')
		}
	}
	if len(in.DisableCredentialTypes) != 0 {
		const prefix string = ",\"disableCredentialTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v123, v124 := range in.DisableCredentialTypes {
				if v123 > 0 {
					out.RawByte(',')
				}
				out.String(string(v124))
			}
			out.RawByte(']')
		}
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.EmailVerified != nil {
		const prefix string = ",\"emailVerified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EmailVerified))
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if len(in.FederatedIdentities) != 0 {
		const prefix string = ",\"federatedIdentities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v125, v126 := range in.FederatedIdentities {
				if v125 > 0 {
					out.RawByte(',')
				}
				easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak13(out, v126)
			}
			out.RawByte(']')
		}
	}
	if in.FederationLink != nil {
		const prefix string = ",\"federationLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson4c59d78cEncodeNetUrl(out, *in.FederationLink)
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v127, v128 := range in.Groups {
				if v127 > 0 {
					out.RawByte(',')
				}
				out.String(string(v128))
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.NotBefore != nil {
		const prefix string = ",\"notBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.Origin != "" {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	if len(in.RealmRoles) != 0 {
		const prefix string = ",\"realmRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v129, v130 := range in.RealmRoles {
				if v129 > 0 {
					out.RawByte(',')
				}
				out.String(string(v130))
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredActions) != 0 {
		const prefix string = ",\"requiredActions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v131, v132 := range in.RequiredActions {
				if v131 > 0 {
					out.RawByte(',')
				}
				out.String(string(v132))
			}
			out.RawByte(']')
		}
	}
	if in.Self != "" {
		const prefix string = ",\"self\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Self))
	}
	if in.ServiceAccountClientID != "" {
		const prefix string = ",\"serviceAccountClientId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceAccountClientID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjson4c59d78cDecodeNetUrl1(in, &*out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "ForceQuery":
			out.ForceQuery = bool(in.Bool())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Scheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"Opaque\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Opaque))
	}
	{
		const prefix string = ",\"User\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson4c59d78cEncodeNetUrl1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"Host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"RawPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"ForceQuery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForceQuery))
	}
	{
		const prefix string = ",\"RawQuery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawQuery))
	}
	{
		const prefix string = ",\"Fragment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fragment))
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak13(in *jlexer.Lexer, out *FederatedIdentityRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identityProvider":
			out.IdentityProvider = string(in.String())
		case "userId":
			out.UserID = string(in.String())
		case "userName":
			out.UserName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak13(out *jwriter.Writer, in FederatedIdentityRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IdentityProvider != "" {
		const prefix string = ",\"identityProvider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityProvider))
	}
	if in.UserID != "" {
		const prefix string = ",\"userId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.UserName != "" {
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak12(in *jlexer.Lexer, out *CredentialRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "algorithm":
			out.Algorithm = string(in.String())
		case "counter":
			out.Counter = int32(in.Int32())
		case "createdDate":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "device":
			out.Device = string(in.String())
		case "digits":
			out.Digits = int32(in.Int32())
		case "hashIterations":
			out.HashIterations = int32(in.Int32())
		case "hashedSaltedValue":
			out.HashedSaltedValue = string(in.String())
		case "period":
			out.Period = int32(in.Int32())
		case "salt":
			out.Salt = string(in.String())
		case "temporary":
			if in.IsNull() {
				in.Skip()
				out.Temporary = nil
			} else {
				if out.Temporary == nil {
					out.Temporary = new(bool)
				}
				*out.Temporary = bool(in.Bool())
			}
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak12(out *jwriter.Writer, in CredentialRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Algorithm != "" {
		const prefix string = ",\"algorithm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Algorithm))
	}
	if in.Counter != 0 {
		const prefix string = ",\"counter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Counter))
	}
	if in.CreatedDate != nil {
		const prefix string = ",\"createdDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedDate).MarshalJSON())
	}
	if in.Device != "" {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Device))
	}
	if in.Digits != 0 {
		const prefix string = ",\"digits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Digits))
	}
	if in.HashIterations != 0 {
		const prefix string = ",\"hashIterations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.HashIterations))
	}
	if in.HashedSaltedValue != "" {
		const prefix string = ",\"hashedSaltedValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HashedSaltedValue))
	}
	if in.Period != 0 {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Period))
	}
	if in.Salt != "" {
		const prefix string = ",\"salt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Salt))
	}
	if in.Temporary != nil {
		const prefix string = ",\"temporary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Temporary))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak11(in *jlexer.Lexer, out *UserConsentRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientId":
			out.ClientID = string(in.String())
		case "createdDate":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "grantedClientScopes":
			if in.IsNull() {
				in.Skip()
				out.GrantedClientScopes = nil
			} else {
				in.Delim('[')
				if out.GrantedClientScopes == nil {
					if !in.IsDelim(']') {
						out.GrantedClientScopes = make([]string, 0, 4)
					} else {
						out.GrantedClientScopes = []string{}
					}
				} else {
					out.GrantedClientScopes = (out.GrantedClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v133 string
					v133 = string(in.String())
					out.GrantedClientScopes = append(out.GrantedClientScopes, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastUpdatedDate":
			if in.IsNull() {
				in.Skip()
				out.LastUpdatedDate = nil
			} else {
				if out.LastUpdatedDate == nil {
					out.LastUpdatedDate = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastUpdatedDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak11(out *jwriter.Writer, in UserConsentRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClientID != "" {
		const prefix string = ",\"clientId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientID))
	}
	if in.CreatedDate != nil {
		const prefix string = ",\"createdDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedDate).MarshalJSON())
	}
	if len(in.GrantedClientScopes) != 0 {
		const prefix string = ",\"grantedClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v134, v135 := range in.GrantedClientScopes {
				if v134 > 0 {
					out.RawByte(',')
				}
				out.String(string(v135))
			}
			out.RawByte(']')
		}
	}
	if in.LastUpdatedDate != nil {
		const prefix string = ",\"lastUpdatedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.LastUpdatedDate).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak8(in *jlexer.Lexer, out *MultivaluedHashMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "empty":
			out.Empty = bool(in.Bool())
		case "loadFactor":
			out.LoadFactor = float64(in.Float64())
		case "threshold":
			out.Threshold = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak8(out *jwriter.Writer, in MultivaluedHashMap) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Empty {
		const prefix string = ",\"empty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Empty))
	}
	if in.LoadFactor != 0 {
		const prefix string = ",\"loadFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.LoadFactor))
	}
	if in.Threshold != 0 {
		const prefix string = ",\"threshold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Threshold))
	}
	out.RawByte('}')
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak14(in *jlexer.Lexer, out *IdentityProviderRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addReadTokenRoleOnCreate":
			if in.IsNull() {
				in.Skip()
				out.AddReadTokenRoleOnCreate = nil
			} else {
				if out.AddReadTokenRoleOnCreate == nil {
					out.AddReadTokenRoleOnCreate = new(bool)
				}
				*out.AddReadTokenRoleOnCreate = bool(in.Bool())
			}
		case "alias":
			out.Alias = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v136 interface{}
					if m, ok := v136.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v136.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v136 = in.Interface()
					}
					(out.Config)[key] = v136
					in.WantComma()
				}
				in.Delim('}')
			}
		case "displayName":
			out.DisplayName = string(in.String())
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "firstBrokerLoginFlowAlias":
			out.FirstBrokerLoginFlowAlias = string(in.String())
		case "internalID":
			out.InternalID = string(in.String())
		case "linkOnly":
			if in.IsNull() {
				in.Skip()
				out.LinkOnly = nil
			} else {
				if out.LinkOnly == nil {
					out.LinkOnly = new(bool)
				}
				*out.LinkOnly = bool(in.Bool())
			}
		case "postBrokerLoginFlowAlias":
			out.PostBrokerLoginFlowAlias = string(in.String())
		case "providerID":
			out.ProviderID = string(in.String())
		case "storeToken":
			if in.IsNull() {
				in.Skip()
				out.StoreToken = nil
			} else {
				if out.StoreToken == nil {
					out.StoreToken = new(bool)
				}
				*out.StoreToken = bool(in.Bool())
			}
		case "trustEmail":
			if in.IsNull() {
				in.Skip()
				out.TrustEmail = nil
			} else {
				if out.TrustEmail == nil {
					out.TrustEmail = new(bool)
				}
				*out.TrustEmail = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak14(out *jwriter.Writer, in IdentityProviderRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AddReadTokenRoleOnCreate != nil {
		const prefix string = ",\"addReadTokenRoleOnCreate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AddReadTokenRoleOnCreate))
	}
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Alias))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v137First := true
			for v137Name, v137Value := range in.Config {
				if v137First {
					v137First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v137Name))
				out.RawByte(':')
				if m, ok := v137Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v137Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v137Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if in.FirstBrokerLoginFlowAlias != "" {
		const prefix string = ",\"firstBrokerLoginFlowAlias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstBrokerLoginFlowAlias))
	}
	if in.InternalID != "" {
		const prefix string = ",\"internalID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InternalID))
	}
	if in.LinkOnly != nil {
		const prefix string = ",\"linkOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.LinkOnly))
	}
	if in.PostBrokerLoginFlowAlias != "" {
		const prefix string = ",\"postBrokerLoginFlowAlias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostBrokerLoginFlowAlias))
	}
	if in.ProviderID != "" {
		const prefix string = ",\"providerID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderID))
	}
	if in.StoreToken != nil {
		const prefix string = ",\"storeToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.StoreToken))
	}
	if in.TrustEmail != nil {
		const prefix string = ",\"trustEmail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.TrustEmail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IdentityProviderRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IdentityProviderRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IdentityProviderRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IdentityProviderRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak14(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak15(in *jlexer.Lexer, out *IdentityProviderMapperRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v138 interface{}
					if m, ok := v138.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v138.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v138 = in.Interface()
					}
					(out.Config)[key] = v138
					in.WantComma()
				}
				in.Delim('}')
			}
		case "id":
			out.ID = string(in.String())
		case "identityProviderAlias":
			out.IdentityProviderAlias = string(in.String())
		case "identityProviderMapper":
			out.IdentityProviderMapper = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak15(out *jwriter.Writer, in IdentityProviderMapperRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v139First := true
			for v139Name, v139Value := range in.Config {
				if v139First {
					v139First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v139Name))
				out.RawByte(':')
				if m, ok := v139Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v139Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v139Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.IdentityProviderAlias != "" {
		const prefix string = ",\"identityProviderAlias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityProviderAlias))
	}
	if in.IdentityProviderMapper != "" {
		const prefix string = ",\"identityProviderMapper\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityProviderMapper))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IdentityProviderMapperRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IdentityProviderMapperRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IdentityProviderMapperRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IdentityProviderMapperRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak15(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak16(in *jlexer.Lexer, out *ClientScopeRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v140 interface{}
					if m, ok := v140.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v140.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v140 = in.Interface()
					}
					(out.Attributes)[key] = v140
					in.WantComma()
				}
				in.Delim('}')
			}
		case "description":
			out.Description = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "protocolMappers":
			if in.IsNull() {
				in.Skip()
				out.ProtocolMappers = nil
			} else {
				in.Delim('[')
				if out.ProtocolMappers == nil {
					if !in.IsDelim(']') {
						out.ProtocolMappers = make([]ProtocolMapperRepresentation, 0, 1)
					} else {
						out.ProtocolMappers = []ProtocolMapperRepresentation{}
					}
				} else {
					out.ProtocolMappers = (out.ProtocolMappers)[:0]
				}
				for !in.IsDelim(']') {
					var v141 ProtocolMapperRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v141).UnmarshalJSON(data))
					}
					out.ProtocolMappers = append(out.ProtocolMappers, v141)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak16(out *jwriter.Writer, in ClientScopeRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v142First := true
			for v142Name, v142Value := range in.Attributes {
				if v142First {
					v142First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v142Name))
				out.RawByte(':')
				if m, ok := v142Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v142Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v142Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	if len(in.ProtocolMappers) != 0 {
		const prefix string = ",\"protocolMappers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.ProtocolMappers {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.Raw((v144).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientScopeRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientScopeRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientScopeRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientScopeRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak16(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak17(in *jlexer.Lexer, out *AuthenticatorConfigRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alias":
			out.Alias = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(AttributeMap)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v145 interface{}
					if m, ok := v145.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v145.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v145 = in.Interface()
					}
					(out.Config)[key] = v145
					in.WantComma()
				}
				in.Delim('}')
			}
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak17(out *jwriter.Writer, in AuthenticatorConfigRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Alias))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v146First := true
			for v146Name, v146Value := range in.Config {
				if v146First {
					v146First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v146Name))
				out.RawByte(':')
				if m, ok := v146Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v146Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v146Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthenticatorConfigRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthenticatorConfigRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthenticatorConfigRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthenticatorConfigRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak17(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak18(in *jlexer.Lexer, out *AuthenticationFlowRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alias":
			out.Alias = string(in.String())
		case "authenticationExecutions":
			if in.IsNull() {
				in.Skip()
				out.AuthenticationExecutions = nil
			} else {
				in.Delim('[')
				if out.AuthenticationExecutions == nil {
					if !in.IsDelim(']') {
						out.AuthenticationExecutions = make([]AuthenticationExecutionExportRepresentation, 0, 1)
					} else {
						out.AuthenticationExecutions = []AuthenticationExecutionExportRepresentation{}
					}
				} else {
					out.AuthenticationExecutions = (out.AuthenticationExecutions)[:0]
				}
				for !in.IsDelim(']') {
					var v147 AuthenticationExecutionExportRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v147).UnmarshalJSON(data))
					}
					out.AuthenticationExecutions = append(out.AuthenticationExecutions, v147)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "builtIn":
			if in.IsNull() {
				in.Skip()
				out.BuiltIn = nil
			} else {
				if out.BuiltIn == nil {
					out.BuiltIn = new(bool)
				}
				*out.BuiltIn = bool(in.Bool())
			}
		case "description":
			out.Description = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "providerID":
			out.ProviderID = string(in.String())
		case "topLevel":
			if in.IsNull() {
				in.Skip()
				out.TopLevel = nil
			} else {
				if out.TopLevel == nil {
					out.TopLevel = new(bool)
				}
				*out.TopLevel = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak18(out *jwriter.Writer, in AuthenticationFlowRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Alias))
	}
	if len(in.AuthenticationExecutions) != 0 {
		const prefix string = ",\"authenticationExecutions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v148, v149 := range in.AuthenticationExecutions {
				if v148 > 0 {
					out.RawByte(',')
				}
				out.Raw((v149).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.BuiltIn != nil {
		const prefix string = ",\"builtIn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.BuiltIn))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.ProviderID != "" {
		const prefix string = ",\"providerID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderID))
	}
	if in.TopLevel != nil {
		const prefix string = ",\"topLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.TopLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthenticationFlowRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthenticationFlowRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthenticationFlowRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthenticationFlowRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak18(l, v)
}
func easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak19(in *jlexer.Lexer, out *AuthenticationExecutionExportRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authenticator":
			out.Authenticator = string(in.String())
		case "authenticatorConfig":
			out.AuthenticatorConfig = string(in.String())
		case "authenticatorFlow":
			if in.IsNull() {
				in.Skip()
				out.AuthenticatorFlow = nil
			} else {
				if out.AuthenticatorFlow == nil {
					out.AuthenticatorFlow = new(bool)
				}
				*out.AuthenticatorFlow = bool(in.Bool())
			}
		case "autheticatorFlow":
			if in.IsNull() {
				in.Skip()
				out.AutheticatorFlow = nil
			} else {
				if out.AutheticatorFlow == nil {
					out.AutheticatorFlow = new(bool)
				}
				*out.AutheticatorFlow = bool(in.Bool())
			}
		case "flowAlias":
			out.FlowAlias = string(in.String())
		case "priority":
			out.Priority = int(in.Int())
		case "requirement":
			out.Requirement = string(in.String())
		case "userSetupAllowed":
			if in.IsNull() {
				in.Skip()
				out.UserSetupAllowed = nil
			} else {
				if out.UserSetupAllowed == nil {
					out.UserSetupAllowed = new(bool)
				}
				*out.UserSetupAllowed = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak19(out *jwriter.Writer, in AuthenticationExecutionExportRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Authenticator != "" {
		const prefix string = ",\"authenticator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Authenticator))
	}
	if in.AuthenticatorConfig != "" {
		const prefix string = ",\"authenticatorConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthenticatorConfig))
	}
	if in.AuthenticatorFlow != nil {
		const prefix string = ",\"authenticatorFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AuthenticatorFlow))
	}
	if in.AutheticatorFlow != nil {
		const prefix string = ",\"autheticatorFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutheticatorFlow))
	}
	if in.FlowAlias != "" {
		const prefix string = ",\"flowAlias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FlowAlias))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Priority))
	}
	if in.Requirement != "" {
		const prefix string = ",\"requirement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Requirement))
	}
	if in.UserSetupAllowed != nil {
		const prefix string = ",\"userSetupAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.UserSetupAllowed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthenticationExecutionExportRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthenticationExecutionExportRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4c59d78cEncodeGithubComAzukaKeycloakAdminGoKeycloak19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthenticationExecutionExportRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthenticationExecutionExportRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4c59d78cDecodeGithubComAzukaKeycloakAdminGoKeycloak19(l, v)
}
