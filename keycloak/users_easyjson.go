// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package keycloak

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	url "net/url"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak(in *jlexer.Lexer, out *UserSessionRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clients":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Clients = make(AttributeMap)
				} else {
					out.Clients = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Clients)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "id":
			out.ID = string(in.String())
		case "ipAddress":
			out.IPAddress = string(in.String())
		case "lastAccess":
			if in.IsNull() {
				in.Skip()
				out.LastAccess = nil
			} else {
				if out.LastAccess == nil {
					out.LastAccess = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastAccess).UnmarshalJSON(data))
				}
			}
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Start).UnmarshalJSON(data))
				}
			}
		case "userID":
			out.UserID = string(in.String())
		case "userName":
			out.UserName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak(out *jwriter.Writer, in UserSessionRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Clients) != 0 {
		const prefix string = ",\"clients\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Clients {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.IPAddress != "" {
		const prefix string = ",\"ipAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPAddress))
	}
	if in.LastAccess != nil {
		const prefix string = ",\"lastAccess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.LastAccess).MarshalJSON())
	}
	if in.Start != nil {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Start).MarshalJSON())
	}
	if in.UserID != "" {
		const prefix string = ",\"userID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.UserName != "" {
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSessionRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSessionRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSessionRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSessionRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak(l, v)
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak1(in *jlexer.Lexer, out *UserRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Access = make(AttributeMap)
				} else {
					out.Access = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Access)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Attributes)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientRoles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ClientRoles = make(AttributeMap)
				} else {
					out.ClientRoles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.ClientRoles)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientConsents":
			if in.IsNull() {
				in.Skip()
				out.ClientConsents = nil
			} else {
				in.Delim('[')
				if out.ClientConsents == nil {
					if !in.IsDelim(']') {
						out.ClientConsents = make([]UserConsentRepresentation, 0, 1)
					} else {
						out.ClientConsents = []UserConsentRepresentation{}
					}
				} else {
					out.ClientConsents = (out.ClientConsents)[:0]
				}
				for !in.IsDelim(']') {
					var v6 UserConsentRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v6).UnmarshalJSON(data))
					}
					out.ClientConsents = append(out.ClientConsents, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdTimestamp":
			if in.IsNull() {
				in.Skip()
				out.CreatedTimestamp = nil
			} else {
				if out.CreatedTimestamp == nil {
					out.CreatedTimestamp = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedTimestamp).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				in.Delim('[')
				if out.Credentials == nil {
					if !in.IsDelim(']') {
						out.Credentials = make([]CredentialRepresentation, 0, 1)
					} else {
						out.Credentials = []CredentialRepresentation{}
					}
				} else {
					out.Credentials = (out.Credentials)[:0]
				}
				for !in.IsDelim(']') {
					var v7 CredentialRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Credentials = append(out.Credentials, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "disableCredentialTypes":
			if in.IsNull() {
				in.Skip()
				out.DisableCredentialTypes = nil
			} else {
				in.Delim('[')
				if out.DisableCredentialTypes == nil {
					if !in.IsDelim(']') {
						out.DisableCredentialTypes = make([]string, 0, 4)
					} else {
						out.DisableCredentialTypes = []string{}
					}
				} else {
					out.DisableCredentialTypes = (out.DisableCredentialTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.DisableCredentialTypes = append(out.DisableCredentialTypes, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "email":
			out.Email = string(in.String())
		case "emailVerified":
			if in.IsNull() {
				in.Skip()
				out.EmailVerified = nil
			} else {
				if out.EmailVerified == nil {
					out.EmailVerified = new(bool)
				}
				*out.EmailVerified = bool(in.Bool())
			}
		case "enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "federatedIdentities":
			if in.IsNull() {
				in.Skip()
				out.FederatedIdentities = nil
			} else {
				in.Delim('[')
				if out.FederatedIdentities == nil {
					if !in.IsDelim(']') {
						out.FederatedIdentities = make([]FederatedIdentityRepresentation, 0, 1)
					} else {
						out.FederatedIdentities = []FederatedIdentityRepresentation{}
					}
				} else {
					out.FederatedIdentities = (out.FederatedIdentities)[:0]
				}
				for !in.IsDelim(']') {
					var v9 FederatedIdentityRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v9).UnmarshalJSON(data))
					}
					out.FederatedIdentities = append(out.FederatedIdentities, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "federationLink":
			if in.IsNull() {
				in.Skip()
				out.FederationLink = nil
			} else {
				if out.FederationLink == nil {
					out.FederationLink = new(url.URL)
				}
				easyjson84c0690eDecodeNetUrl(in, &*out.FederationLink)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]string, 0, 4)
					} else {
						out.Groups = []string{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Groups = append(out.Groups, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "notBefore":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "origin":
			out.Origin = string(in.String())
		case "realmRoles":
			if in.IsNull() {
				in.Skip()
				out.RealmRoles = nil
			} else {
				in.Delim('[')
				if out.RealmRoles == nil {
					if !in.IsDelim(']') {
						out.RealmRoles = make([]string, 0, 4)
					} else {
						out.RealmRoles = []string{}
					}
				} else {
					out.RealmRoles = (out.RealmRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.RealmRoles = append(out.RealmRoles, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredActions":
			if in.IsNull() {
				in.Skip()
				out.RequiredActions = nil
			} else {
				in.Delim('[')
				if out.RequiredActions == nil {
					if !in.IsDelim(']') {
						out.RequiredActions = make([]string, 0, 4)
					} else {
						out.RequiredActions = []string{}
					}
				} else {
					out.RequiredActions = (out.RequiredActions)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.RequiredActions = append(out.RequiredActions, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "self":
			out.Self = string(in.String())
		case "serviceAccountClientId":
			out.ServiceAccountClientID = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak1(out *jwriter.Writer, in UserRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Access) != 0 {
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Access {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Attributes {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if m, ok := v14Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v14Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v14Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientRoles) != 0 {
		const prefix string = ",\"clientRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.ClientRoles {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				if m, ok := v15Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientConsents) != 0 {
		const prefix string = ",\"clientConsents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.ClientConsents {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Raw((v17).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.CreatedTimestamp != nil {
		const prefix string = ",\"createdTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedTimestamp).MarshalJSON())
	}
	if len(in.Credentials) != 0 {
		const prefix string = ",\"credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Credentials {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Raw((v19).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.DisableCredentialTypes) != 0 {
		const prefix string = ",\"disableCredentialTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.DisableCredentialTypes {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.EmailVerified != nil {
		const prefix string = ",\"emailVerified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EmailVerified))
	}
	if in.Enabled != nil {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Enabled))
	}
	if len(in.FederatedIdentities) != 0 {
		const prefix string = ",\"federatedIdentities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.FederatedIdentities {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Raw((v23).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.FederationLink != nil {
		const prefix string = ",\"federationLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson84c0690eEncodeNetUrl(out, *in.FederationLink)
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Groups {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.NotBefore != nil {
		const prefix string = ",\"notBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.Origin != "" {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	if len(in.RealmRoles) != 0 {
		const prefix string = ",\"realmRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.RealmRoles {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredActions) != 0 {
		const prefix string = ",\"requiredActions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.RequiredActions {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if in.Self != "" {
		const prefix string = ",\"self\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Self))
	}
	if in.ServiceAccountClientID != "" {
		const prefix string = ",\"serviceAccountClientId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceAccountClientID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak1(l, v)
}
func easyjson84c0690eDecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjson84c0690eDecodeNetUrl1(in, &*out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "ForceQuery":
			out.ForceQuery = bool(in.Bool())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Scheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"Opaque\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Opaque))
	}
	{
		const prefix string = ",\"User\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson84c0690eEncodeNetUrl1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"Host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"RawPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"ForceQuery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForceQuery))
	}
	{
		const prefix string = ",\"RawQuery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawQuery))
	}
	{
		const prefix string = ",\"Fragment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fragment))
	}
	out.RawByte('}')
}
func easyjson84c0690eDecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak2(in *jlexer.Lexer, out *UserConsentRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientId":
			out.ClientID = string(in.String())
		case "createdDate":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "grantedClientScopes":
			if in.IsNull() {
				in.Skip()
				out.GrantedClientScopes = nil
			} else {
				in.Delim('[')
				if out.GrantedClientScopes == nil {
					if !in.IsDelim(']') {
						out.GrantedClientScopes = make([]string, 0, 4)
					} else {
						out.GrantedClientScopes = []string{}
					}
				} else {
					out.GrantedClientScopes = (out.GrantedClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.GrantedClientScopes = append(out.GrantedClientScopes, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastUpdatedDate":
			if in.IsNull() {
				in.Skip()
				out.LastUpdatedDate = nil
			} else {
				if out.LastUpdatedDate == nil {
					out.LastUpdatedDate = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastUpdatedDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak2(out *jwriter.Writer, in UserConsentRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClientID != "" {
		const prefix string = ",\"clientId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientID))
	}
	if in.CreatedDate != nil {
		const prefix string = ",\"createdDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedDate).MarshalJSON())
	}
	if len(in.GrantedClientScopes) != 0 {
		const prefix string = ",\"grantedClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.GrantedClientScopes {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if in.LastUpdatedDate != nil {
		const prefix string = ",\"lastUpdatedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.LastUpdatedDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserConsentRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserConsentRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserConsentRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserConsentRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak2(l, v)
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak3(in *jlexer.Lexer, out *GroupRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Access = make(AttributeMap)
				} else {
					out.Access = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v33 interface{}
					if m, ok := v33.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v33.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v33 = in.Interface()
					}
					(out.Access)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 interface{}
					if m, ok := v34.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v34.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v34 = in.Interface()
					}
					(out.Attributes)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientRoles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ClientRoles = make(AttributeMap)
				} else {
					out.ClientRoles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 interface{}
					if m, ok := v35.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v35.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v35 = in.Interface()
					}
					(out.ClientRoles)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "realmRoles":
			if in.IsNull() {
				in.Skip()
				out.RealmRoles = nil
			} else {
				in.Delim('[')
				if out.RealmRoles == nil {
					if !in.IsDelim(']') {
						out.RealmRoles = make([]string, 0, 4)
					} else {
						out.RealmRoles = []string{}
					}
				} else {
					out.RealmRoles = (out.RealmRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.RealmRoles = append(out.RealmRoles, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subGroups":
			if in.IsNull() {
				in.Skip()
				out.SubGroups = nil
			} else {
				in.Delim('[')
				if out.SubGroups == nil {
					if !in.IsDelim(']') {
						out.SubGroups = make([]GroupRepresentation, 0, 1)
					} else {
						out.SubGroups = []GroupRepresentation{}
					}
				} else {
					out.SubGroups = (out.SubGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v37 GroupRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v37).UnmarshalJSON(data))
					}
					out.SubGroups = append(out.SubGroups, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak3(out *jwriter.Writer, in GroupRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Access) != 0 {
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.Access {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				if m, ok := v38Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v38Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v38Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.Attributes {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				if m, ok := v39Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v39Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v39Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientRoles) != 0 {
		const prefix string = ",\"clientRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.ClientRoles {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				if m, ok := v40Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v40Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v40Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if len(in.RealmRoles) != 0 {
		const prefix string = ",\"realmRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.RealmRoles {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if len(in.SubGroups) != 0 {
		const prefix string = ",\"subGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.SubGroups {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.Raw((v44).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak3(l, v)
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak4(in *jlexer.Lexer, out *FederatedIdentityRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identityProvider":
			out.IdentityProvider = string(in.String())
		case "userId":
			out.UserID = string(in.String())
		case "userName":
			out.UserName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak4(out *jwriter.Writer, in FederatedIdentityRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IdentityProvider != "" {
		const prefix string = ",\"identityProvider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityProvider))
	}
	if in.UserID != "" {
		const prefix string = ",\"userId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.UserName != "" {
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FederatedIdentityRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FederatedIdentityRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FederatedIdentityRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FederatedIdentityRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak4(l, v)
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak5(in *jlexer.Lexer, out *CredentialRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "algorithm":
			out.Algorithm = string(in.String())
		case "counter":
			out.Counter = int32(in.Int32())
		case "createdDate":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(UnixTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "device":
			out.Device = string(in.String())
		case "digits":
			out.Digits = int32(in.Int32())
		case "hashIterations":
			out.HashIterations = int32(in.Int32())
		case "hashedSaltedValue":
			out.HashedSaltedValue = string(in.String())
		case "period":
			out.Period = int32(in.Int32())
		case "salt":
			out.Salt = string(in.String())
		case "temporary":
			if in.IsNull() {
				in.Skip()
				out.Temporary = nil
			} else {
				if out.Temporary == nil {
					out.Temporary = new(bool)
				}
				*out.Temporary = bool(in.Bool())
			}
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak5(out *jwriter.Writer, in CredentialRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Algorithm != "" {
		const prefix string = ",\"algorithm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Algorithm))
	}
	if in.Counter != 0 {
		const prefix string = ",\"counter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Counter))
	}
	if in.CreatedDate != nil {
		const prefix string = ",\"createdDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedDate).MarshalJSON())
	}
	if in.Device != "" {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Device))
	}
	if in.Digits != 0 {
		const prefix string = ",\"digits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Digits))
	}
	if in.HashIterations != 0 {
		const prefix string = ",\"hashIterations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.HashIterations))
	}
	if in.HashedSaltedValue != "" {
		const prefix string = ",\"hashedSaltedValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HashedSaltedValue))
	}
	if in.Period != 0 {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Period))
	}
	if in.Salt != "" {
		const prefix string = ",\"salt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Salt))
	}
	if in.Temporary != nil {
		const prefix string = ",\"temporary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Temporary))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CredentialRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CredentialRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGoKeycloak5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CredentialRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CredentialRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGoKeycloak5(l, v)
}
