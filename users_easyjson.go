// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package keycloak

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	url "net/url"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo(in *jlexer.Lexer, out *UserRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Access = make(AttributeMap)
				} else {
					out.Access = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Access)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(AttributeMap)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Attributes)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientRoles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ClientRoles = make(AttributeMap)
				} else {
					out.ClientRoles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.ClientRoles)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clientConsents":
			if in.IsNull() {
				in.Skip()
				out.ClientConsents = nil
			} else {
				in.Delim('[')
				if out.ClientConsents == nil {
					if !in.IsDelim(']') {
						out.ClientConsents = make([]UserConsentRepresentation, 0, 1)
					} else {
						out.ClientConsents = []UserConsentRepresentation{}
					}
				} else {
					out.ClientConsents = (out.ClientConsents)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UserConsentRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v4).UnmarshalJSON(data))
					}
					out.ClientConsents = append(out.ClientConsents, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdTimestamp":
			if in.IsNull() {
				in.Skip()
				out.CreatedTimestamp = nil
			} else {
				if out.CreatedTimestamp == nil {
					out.CreatedTimestamp = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedTimestamp).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				in.Delim('[')
				if out.Credentials == nil {
					if !in.IsDelim(']') {
						out.Credentials = make([]CredentialRepresentation, 0, 1)
					} else {
						out.Credentials = []CredentialRepresentation{}
					}
				} else {
					out.Credentials = (out.Credentials)[:0]
				}
				for !in.IsDelim(']') {
					var v5 CredentialRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v5).UnmarshalJSON(data))
					}
					out.Credentials = append(out.Credentials, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "disableCredentialTypes":
			if in.IsNull() {
				in.Skip()
				out.DisableCredentialTypes = nil
			} else {
				in.Delim('[')
				if out.DisableCredentialTypes == nil {
					if !in.IsDelim(']') {
						out.DisableCredentialTypes = make([]string, 0, 4)
					} else {
						out.DisableCredentialTypes = []string{}
					}
				} else {
					out.DisableCredentialTypes = (out.DisableCredentialTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.DisableCredentialTypes = append(out.DisableCredentialTypes, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "email":
			out.Email = string(in.String())
		case "emailVerified":
			out.EmailVerified = bool(in.Bool())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "federatedIdentities":
			if in.IsNull() {
				in.Skip()
				out.FederatedIDentities = nil
			} else {
				in.Delim('[')
				if out.FederatedIDentities == nil {
					if !in.IsDelim(']') {
						out.FederatedIDentities = make([]FederatedIdentityRepresentation, 0, 1)
					} else {
						out.FederatedIDentities = []FederatedIdentityRepresentation{}
					}
				} else {
					out.FederatedIDentities = (out.FederatedIDentities)[:0]
				}
				for !in.IsDelim(']') {
					var v7 FederatedIdentityRepresentation
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.FederatedIDentities = append(out.FederatedIDentities, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "federationLink":
			if in.IsNull() {
				in.Skip()
				out.FederationLink = nil
			} else {
				if out.FederationLink == nil {
					out.FederationLink = new(url.URL)
				}
				easyjson84c0690eDecodeNetUrl(in, &*out.FederationLink)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]string, 0, 4)
					} else {
						out.Groups = []string{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Groups = append(out.Groups, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "notBefore":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "origin":
			out.Origin = string(in.String())
		case "realmRoles":
			if in.IsNull() {
				in.Skip()
				out.RealmRoles = nil
			} else {
				in.Delim('[')
				if out.RealmRoles == nil {
					if !in.IsDelim(']') {
						out.RealmRoles = make([]string, 0, 4)
					} else {
						out.RealmRoles = []string{}
					}
				} else {
					out.RealmRoles = (out.RealmRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.RealmRoles = append(out.RealmRoles, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredActions":
			if in.IsNull() {
				in.Skip()
				out.RequiredActions = nil
			} else {
				in.Delim('[')
				if out.RequiredActions == nil {
					if !in.IsDelim(']') {
						out.RequiredActions = make([]string, 0, 4)
					} else {
						out.RequiredActions = []string{}
					}
				} else {
					out.RequiredActions = (out.RequiredActions)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.RequiredActions = append(out.RequiredActions, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "self":
			out.Self = string(in.String())
		case "serviceAccountClientId":
			out.ServiceAccountClientID = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo(out *jwriter.Writer, in UserRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Access) != 0 {
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Access {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Attributes {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.String(string(v12Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientRoles) != 0 {
		const prefix string = ",\"clientRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.ClientRoles {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				out.String(string(v13Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ClientConsents) != 0 {
		const prefix string = ",\"clientConsents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.ClientConsents {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Raw((v15).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.CreatedTimestamp != nil {
		const prefix string = ",\"createdTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedTimestamp).MarshalJSON())
	}
	if len(in.Credentials) != 0 {
		const prefix string = ",\"credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Credentials {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Raw((v17).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.DisableCredentialTypes) != 0 {
		const prefix string = ",\"disableCredentialTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.DisableCredentialTypes {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.EmailVerified {
		const prefix string = ",\"emailVerified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EmailVerified))
	}
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	if len(in.FederatedIDentities) != 0 {
		const prefix string = ",\"federatedIdentities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.FederatedIDentities {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Raw((v21).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.FederationLink != nil {
		const prefix string = ",\"federationLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson84c0690eEncodeNetUrl(out, *in.FederationLink)
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Groups {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.NotBefore != nil {
		const prefix string = ",\"notBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.Origin != "" {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	if len(in.RealmRoles) != 0 {
		const prefix string = ",\"realmRoles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.RealmRoles {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredActions) != 0 {
		const prefix string = ",\"requiredActions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.RequiredActions {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if in.Self != "" {
		const prefix string = ",\"self\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Self))
	}
	if in.ServiceAccountClientID != "" {
		const prefix string = ",\"serviceAccountClientId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceAccountClientID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo(l, v)
}
func easyjson84c0690eDecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjson84c0690eDecodeNetUrl1(in, &*out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "ForceQuery":
			out.ForceQuery = bool(in.Bool())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Scheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"Opaque\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Opaque))
	}
	{
		const prefix string = ",\"User\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson84c0690eEncodeNetUrl1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"Host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"RawPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"ForceQuery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForceQuery))
	}
	{
		const prefix string = ",\"RawQuery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawQuery))
	}
	{
		const prefix string = ",\"Fragment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fragment))
	}
	out.RawByte('}')
}
func easyjson84c0690eDecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo1(in *jlexer.Lexer, out *UserConsentRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientId":
			out.ClientID = string(in.String())
		case "createdDate":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "grantedClientScopes":
			if in.IsNull() {
				in.Skip()
				out.GrantedClientScopes = nil
			} else {
				in.Delim('[')
				if out.GrantedClientScopes == nil {
					if !in.IsDelim(']') {
						out.GrantedClientScopes = make([]string, 0, 4)
					} else {
						out.GrantedClientScopes = []string{}
					}
				} else {
					out.GrantedClientScopes = (out.GrantedClientScopes)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.GrantedClientScopes = append(out.GrantedClientScopes, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastUpdatedDate":
			if in.IsNull() {
				in.Skip()
				out.LastUpdatedDate = nil
			} else {
				if out.LastUpdatedDate == nil {
					out.LastUpdatedDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastUpdatedDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo1(out *jwriter.Writer, in UserConsentRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClientID != "" {
		const prefix string = ",\"clientId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientID))
	}
	if in.CreatedDate != nil {
		const prefix string = ",\"createdDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedDate).MarshalJSON())
	}
	if len(in.GrantedClientScopes) != 0 {
		const prefix string = ",\"grantedClientScopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.GrantedClientScopes {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if in.LastUpdatedDate != nil {
		const prefix string = ",\"lastUpdatedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.LastUpdatedDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserConsentRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserConsentRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserConsentRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserConsentRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo1(l, v)
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo2(in *jlexer.Lexer, out *FederatedIdentityRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identityProvider":
			out.IdentityProvider = string(in.String())
		case "userId":
			out.UserID = string(in.String())
		case "userName":
			out.UserName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo2(out *jwriter.Writer, in FederatedIdentityRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IdentityProvider != "" {
		const prefix string = ",\"identityProvider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityProvider))
	}
	if in.UserID != "" {
		const prefix string = ",\"userId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.UserName != "" {
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FederatedIdentityRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FederatedIdentityRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FederatedIdentityRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FederatedIdentityRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo2(l, v)
}
func easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo3(in *jlexer.Lexer, out *CredentialRepresentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "algorithm":
			out.Algorithm = string(in.String())
		case "counter":
			out.Counter = int32(in.Int32())
		case "createdDate":
			if in.IsNull() {
				in.Skip()
				out.CreatedDate = nil
			} else {
				if out.CreatedDate == nil {
					out.CreatedDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedDate).UnmarshalJSON(data))
				}
			}
		case "device":
			out.Device = string(in.String())
		case "digits":
			out.Digits = int32(in.Int32())
		case "hashIterations":
			out.HashIterations = int32(in.Int32())
		case "hashedSaltedValue":
			out.HashedSaltedValue = string(in.String())
		case "period":
			out.Period = int32(in.Int32())
		case "salt":
			out.Salt = string(in.String())
		case "temporary":
			out.Temporary = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo3(out *jwriter.Writer, in CredentialRepresentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Algorithm != "" {
		const prefix string = ",\"algorithm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Algorithm))
	}
	if in.Counter != 0 {
		const prefix string = ",\"counter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Counter))
	}
	if in.CreatedDate != nil {
		const prefix string = ",\"createdDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedDate).MarshalJSON())
	}
	if in.Device != "" {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Device))
	}
	if in.Digits != 0 {
		const prefix string = ",\"digits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Digits))
	}
	if in.HashIterations != 0 {
		const prefix string = ",\"hashIterations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.HashIterations))
	}
	if in.HashedSaltedValue != "" {
		const prefix string = ",\"hashedSaltedValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HashedSaltedValue))
	}
	if in.Period != 0 {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Period))
	}
	if in.Salt != "" {
		const prefix string = ",\"salt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Salt))
	}
	if in.Temporary {
		const prefix string = ",\"temporary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Temporary))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CredentialRepresentation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CredentialRepresentation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComAzukaKeycloakAdminGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CredentialRepresentation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CredentialRepresentation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComAzukaKeycloakAdminGo3(l, v)
}
